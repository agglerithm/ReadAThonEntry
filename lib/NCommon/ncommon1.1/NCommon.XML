<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NCommon</name>
    </assembly>
    <members>
        <member name="T:NCommon.State.IState">
            <summary>
            Base IState interface.
            </summary>
        </member>
        <member name="P:NCommon.State.IState.Application">
            <summary>
            Gets the application specific state.
            </summary>
        </member>
        <member name="P:NCommon.State.IState.Session">
            <summary>
            Gets the session specific state.
            </summary>
        </member>
        <member name="P:NCommon.State.IState.Cache">
            <summary>
            Gets the cache specific state.
            </summary>
        </member>
        <member name="P:NCommon.State.IState.Local">
            <summary>
            Gets the thread local / request local specific state.
            </summary>
        </member>
        <member name="T:NCommon.Data.UnitOfWorkScope">
            <summary>
            Helper class that allows starting and using a unit of work like:
            <![CDATA[
                using (UnitOfWorkScope scope = new UnitOfWorkScope()) {
                    //Do some stuff here.
                    scope.Commit();
                }
            
            ]]>
            </summary>
        </member>
        <member name="T:NCommon.Data.IUnitOfWorkScope">
            <summary>
            </summary>
        </member>
        <member name="M:NCommon.Data.IUnitOfWorkScope.Commit">
            <summary>
             Commits the current running transaction in the scope.
            </summary>
        </member>
        <member name="M:NCommon.Data.IUnitOfWorkScope.Complete">
            <summary>
            Marks the scope as completed.
            Used for internally by NCommon and should not be used by consumers.
            </summary>
        </member>
        <member name="E:NCommon.Data.IUnitOfWorkScope.ScopeComitting">
            <summary>
            Event fired when the scope is comitting.
            </summary>
        </member>
        <member name="E:NCommon.Data.IUnitOfWorkScope.ScopeRollingback">
            <summary>
            Event fired when the scope is rollingback.
            </summary>
        </member>
        <member name="P:NCommon.Data.IUnitOfWorkScope.ScopeId">
            <summary>
            Gets the unique Id of the <see cref="T:NCommon.Data.UnitOfWorkScope"/>.
            </summary>
            <value>A <see cref="T:System.Guid"/> representing the unique Id of the scope.</value>
        </member>
        <member name="M:NCommon.Data.UnitOfWorkScope.#ctor">
            <summary>
            Default Constuctor.
            Creates a new <see cref="T:NCommon.Data.UnitOfWorkScope"/> with the <see cref="F:System.Data.IsolationLevel.Serializable"/> 
            transaction isolation level.
            </summary>
        </member>
        <member name="M:NCommon.Data.UnitOfWorkScope.#ctor(System.Boolean)">
            <summary>
            Overloaded Constructor.
            Creates a new instance of the <see cref="T:NCommon.Data.UnitOfWorkScope"/> class.
            </summary>
            <param name="newTransaction">To create a new scope that does not enlist in an existing ambient 
            <see cref="T:NCommon.Data.UnitOfWorkScope"/> or <see cref="T:System.Transactions.TransactionScope"/>, specify new, otherwise specify false.</param>
        </member>
        <member name="M:NCommon.Data.UnitOfWorkScope.Commit">
            <summary>
             Commits the current running transaction in the scope.
            </summary>
        </member>
        <member name="M:NCommon.Data.UnitOfWorkScope.Complete">
            <summary>
            Marks the scope as completed.
            Used for internally by NCommon and should not be used by consumers.
            </summary>
        </member>
        <member name="M:NCommon.Data.UnitOfWorkScope.OnCommit">
            <summary>
            
            </summary>
        </member>
        <member name="M:NCommon.Data.UnitOfWorkScope.OnRollback">
            <summary>
            
            </summary>
        </member>
        <member name="M:NCommon.Data.UnitOfWorkScope.Dispose">
            <summary>
            Disposes off the <see cref="T:NCommon.Data.UnitOfWorkScope"/> insance.
            </summary>
        </member>
        <member name="M:NCommon.Data.UnitOfWorkScope.Dispose(System.Boolean)">
            <summary>
            Disposes off the managed and un-managed resources used.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:NCommon.Data.UnitOfWorkScope.ScopeComitting">
            <summary>
            Event fired when the scope is comitting.
            </summary>
        </member>
        <member name="E:NCommon.Data.UnitOfWorkScope.ScopeRollingback">
            <summary>
            Event fired when the scope is rollingback.
            </summary>
        </member>
        <member name="P:NCommon.Data.UnitOfWorkScope.ScopeId">
            <summary>
            Gets the unique Id of the <see cref="T:NCommon.Data.UnitOfWorkScope"/>.
            </summary>
            <value>A <see cref="T:System.Guid"/> representing the unique Id of the scope.</value>
        </member>
        <member name="T:NCommon.Configuration.NCommonConfig">
            <summary>
             Default implementation of <see cref="T:NCommon.Configuration.INCommonConfig"/> class.
            </summary>
        </member>
        <member name="T:NCommon.Configuration.INCommonConfig">
            <summary>
            Configuration interface exposed by NCommon to configure different services exposed by NCommon.
            </summary>
        </member>
        <member name="M:NCommon.Configuration.INCommonConfig.ConfigureState``1">
            <summary>
            Configure NCommon state storage using a <see cref="T:NCommon.Configuration.IStateConfiguration"/> instance.
            </summary>
            <typeparam name="T">A <see cref="T:NCommon.Configuration.IStateConfiguration"/> type that can be used to configure
            state storage services exposed by NCommon.
            </typeparam>
            <returns><see cref="T:NCommon.Configuration.INCommonConfig"/></returns>
        </member>
        <member name="M:NCommon.Configuration.INCommonConfig.ConfigureState``1(System.Action{``0})">
            <summary>
            Configure NCommon state storage using a <see cref="T:NCommon.Configuration.IStateConfiguration"/> instance.
            </summary>
            <typeparam name="T">A <see cref="T:NCommon.Configuration.IStateConfiguration"/> type that can be used to configure
            state storage services exposed by NCommon.
            </typeparam>
            <param name="actions">An <see cref="T:System.Action`1"/> delegate that can be used to perform
            custom actions on the <see cref="T:NCommon.Configuration.IStateConfiguration"/> instance.</param>
            <returns><see cref="T:NCommon.Configuration.INCommonConfig"/></returns>
        </member>
        <member name="M:NCommon.Configuration.INCommonConfig.ConfigureData``1">
            <summary>
            Configure data providers used by NCommon.
            </summary>
            <typeparam name="T">A <see cref="T:NCommon.Configuration.IDataConfiguration"/> type that can be used to configure
            data providers for NCommon.</typeparam>
            <returns><see cref="T:NCommon.Configuration.INCommonConfig"/></returns>
        </member>
        <member name="M:NCommon.Configuration.INCommonConfig.ConfigureData``1(System.Action{``0})">
            <summary>
            Configure data providers used by NCommon.
            </summary>
            <typeparam name="T">A <see cref="T:NCommon.Configuration.IDataConfiguration"/> type that can be used to configure
            data providers for NCommon.</typeparam>
            <param name="actions">An <see cref="T:System.Action`1"/> delegate that can be used to perform
            custom actions on the <see cref="T:NCommon.Configuration.IDataConfiguration"/> instance.</param>
            <returns><see cref="T:NCommon.Configuration.INCommonConfig"/></returns>
        </member>
        <member name="M:NCommon.Configuration.INCommonConfig.ConfigureUnitOfWork``1">
            <summary>
            Configures NCommon unit of work settings.
            </summary>
            <typeparam name="T">A <see cref="T:NCommon.Configuration.IUnitOfWorkConfiguration"/> type that can be used to configure
            unit of work settings.</typeparam>
            <returns><see cref="T:NCommon.Configuration.INCommonConfig"/></returns>
        </member>
        <member name="M:NCommon.Configuration.INCommonConfig.ConfigureUnitOfWork``1(System.Action{``0})">
            <summary>
             Configures NCommon unit of work settings.
            </summary>
             <typeparam name="T">A <see cref="T:NCommon.Configuration.INCommonConfig"/> type that can be used to configure
             unit of work settings.</typeparam>
            <param name="actions">An <see cref="T:System.Action`1"/> delegate that can be used to perform
             custom actions on the <see cref="T:NCommon.Configuration.IUnitOfWorkConfiguration"/> instance.</param>
            <returns><see cref="T:NCommon.Configuration.INCommonConfig"/></returns>
        </member>
        <member name="M:NCommon.Configuration.NCommonConfig.#ctor(NCommon.Configuration.IContainerAdapter)">
            <summary>
             Default Constructor.
             Creates a new instance of the <see cref="T:NCommon.Configuration.NCommonConfig"/>  class.
            </summary>
            <param name="containerAdapter">An instance of <see cref="T:NCommon.Configuration.IContainerAdapter"/> that can be
             used to register components.</param>
        </member>
        <member name="M:NCommon.Configuration.NCommonConfig.InitializeDefaults">
            <summary>
            Registers default components for NCommon.
            </summary>
        </member>
        <member name="M:NCommon.Configuration.NCommonConfig.ConfigureState``1">
            <summary>
            Configure NCommon state storage using a <see cref="T:NCommon.Configuration.IStateConfiguration"/> instance.
            </summary>
            <typeparam name="T">A <see cref="T:NCommon.Configuration.IStateConfiguration"/> type that can be used to configure
            state storage services exposed by NCommon.
            </typeparam>
            <returns><see cref="T:NCommon.Configuration.INCommonConfig"/></returns>
        </member>
        <member name="M:NCommon.Configuration.NCommonConfig.ConfigureState``1(System.Action{``0})">
            <summary>
            Configure NCommon state storage using a <see cref="T:NCommon.Configuration.IStateConfiguration"/> instance.
            </summary>
            <typeparam name="T">A <see cref="T:NCommon.Configuration.IStateConfiguration"/> type that can be used to configure
            state storage services exposed by NCommon.
            </typeparam>
            <param name="actions">An <see cref="T:System.Action`1"/> delegate that can be used to perform
            custom actions on the <see cref="T:NCommon.Configuration.IStateConfiguration"/> instance.</param>
            <returns><see cref="T:NCommon.Configuration.INCommonConfig"/></returns>
        </member>
        <member name="M:NCommon.Configuration.NCommonConfig.ConfigureData``1">
            <summary>
            Configure data providers used by NCommon.
            </summary>
            <typeparam name="T">A <see cref="T:NCommon.Configuration.IDataConfiguration"/> type that can be used to configure
            data providers for NCommon.</typeparam>
            <returns><see cref="T:NCommon.Configuration.INCommonConfig"/></returns>
        </member>
        <member name="M:NCommon.Configuration.NCommonConfig.ConfigureData``1(System.Action{``0})">
            <summary>
            Configure data providers used by NCommon.
            </summary>
            <typeparam name="T">A <see cref="T:NCommon.Configuration.IDataConfiguration"/> type that can be used to configure
            data providers for NCommon.</typeparam>
            <param name="actions">An <see cref="T:System.Action`1"/> delegate that can be used to perform
            custom actions on the <see cref="T:NCommon.Configuration.IDataConfiguration"/> instance.</param>
            <returns><see cref="T:NCommon.Configuration.INCommonConfig"/></returns>
        </member>
        <member name="M:NCommon.Configuration.NCommonConfig.ConfigureUnitOfWork``1">
            <summary>
            Configures NCommon unit of work settings.
            </summary>
            <typeparam name="T">A <see cref="T:NCommon.Configuration.IUnitOfWorkConfiguration"/> type that can be used to configure
            unit of work settings.</typeparam>
            <returns><see cref="T:NCommon.Configuration.INCommonConfig"/></returns>
        </member>
        <member name="M:NCommon.Configuration.NCommonConfig.ConfigureUnitOfWork``1(System.Action{``0})">
            <summary>
             Configures NCommon unit of work settings.
            </summary>
             <typeparam name="T">A <see cref="T:NCommon.Configuration.INCommonConfig"/> type that can be used to configure
             unit of work settings.</typeparam>
            <param name="actions">An <see cref="T:System.Action`1"/> delegate that can be used to perform
             custom actions on the <see cref="T:NCommon.Configuration.IUnitOfWorkConfiguration"/> instance.</param>
            <returns><see cref="T:NCommon.Configuration.INCommonConfig"/></returns>
        </member>
        <member name="T:NCommon.State.Impl.DefaultSessionStateSelector">
            <summary>
            Default implementation of <see cref="T:NCommon.State.ISessionStateSelector"/>.
            </summary>
        </member>
        <member name="T:NCommon.State.ISessionStateSelector">
            <summary>
            Interface that is implemented by a custom selector that creates instances of <see cref="T:NCommon.State.ISessionState"/>.
            </summary>
        </member>
        <member name="M:NCommon.State.ISessionStateSelector.Get">
            <summary>
            Gets the implementation of <see cref="T:NCommon.State.ISessionState"/> to use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCommon.State.Impl.DefaultSessionStateSelector.#ctor(NCommon.Context.IContext)">
            <summary>
            Default Constructor.
            Creates a new instance of <see cref="T:NCommon.State.Impl.DefaultLocalStateSelector"/> class.
            </summary>
            <param name="context">An instance of <see cref="T:NCommon.Context.IContext"/>.</param>
        </member>
        <member name="M:NCommon.State.Impl.DefaultSessionStateSelector.Get">
            <summary>
            Gets the implementation of <see cref="T:NCommon.State.ISessionState"/> to use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NCommon.Configuration.IStateConfiguration">
            <summary>
            Interface that can be implemented by classes that provide state configuration for NCommon.
            </summary>
        </member>
        <member name="M:NCommon.Configuration.IStateConfiguration.Configure(NCommon.Configuration.IContainerAdapter)">
            <summary>
            Called by NCommon <see cref="M:NCommon.Configuration.IStateConfiguration.Configure(NCommon.Configuration.IContainerAdapter)"/> to configure state storage.
            </summary>
            <param name="containerAdapter">The <see cref="T:NCommon.Configuration.IContainerAdapter"/> instance that can be
            used to register state storage components.</param>
        </member>
        <member name="T:NCommon.Rules.EntityValidatorBase`1">
            <summary>
             Base class that implementors of <see cref="T:NCommon.Rules.IEntityValidator`1"/> can use to 
             provide validation logic for their entities.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:NCommon.Rules.IEntityValidator`1">
            <summary>
            Interface implemented by different flavors of validators that provide validation
            logic on domain entities.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:NCommon.Rules.IEntityValidator`1.Validate(`0)">
            <summary>
            Validates an entity against all validations defined for the entity.
            </summary>
            <param name="entity">The <typeparamref name="TEntity"/> to validate.</param>
            <returns>A <see cref="T:NCommon.Rules.ValidationResult"/> that contains the results of the validation.</returns>
        </member>
        <member name="M:NCommon.Rules.EntityValidatorBase`1.AddValidation(System.String,NCommon.Rules.IValidationRule{`0})">
            <summary>
            Adds a <see cref="T:NCommon.Rules.IValidationRule`1"/> instance to the entity validator.
            </summary>
            <param name="rule">The <see cref="T:NCommon.Rules.IValidationRule`1"/> instance to add.</param>
            <param name="ruleName">string. The unique name assigned to the validation rule.</param>
        </member>
        <member name="M:NCommon.Rules.EntityValidatorBase`1.RemoveValidation(System.String)">
            <summary>
            Removes a previously added rule, specified with the <paramref name="ruleName"/>, from the evaluator.
            </summary>
            <param name="ruleName">string. The name of the rule to remove.</param>
        </member>
        <member name="M:NCommon.Rules.EntityValidatorBase`1.Validate(`0)">
            <summary>
            Validates an entity against all validations defined for the entity.
            </summary>
            <param name="entity">The <typeparamref name="TEntity"/> to validate.</param>
            <returns>A <see cref="T:NCommon.Rules.ValidationResult"/> that contains the results of the validation.</returns>
        </member>
        <member name="T:NCommon.Extensions.SpecificationExtensions">
            <summary>
             Extension methods for <see cref="T:NCommon.Specifications.ISpecification`1"/>.
            </summary>
        </member>
        <member name="M:NCommon.Extensions.SpecificationExtensions.And``1(NCommon.Specifications.ISpecification{``0},NCommon.Specifications.ISpecification{``0})">
            <summary>
            Retuns a new specification adding this one with the passed one.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rightHand">The right hand.</param>
            <param name="leftHand">The left hand.</param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Extensions.SpecificationExtensions.Or``1(NCommon.Specifications.ISpecification{``0},NCommon.Specifications.ISpecification{``0})">
            <summary>
            Retuns a new specification or'ing this one with the passed one.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rightHand">The right hand.</param>
            <param name="leftHand">The left hand.</param>
            <returns></returns>
        </member>
        <member name="T:NCommon.Extensions.CollectionExtensions">
            <summary>
            Contains some usefull extensions for working will collections.
            </summary>
        </member>
        <member name="M:NCommon.Extensions.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            ForEach extension that enumerates over all items in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> and executes 
            an action.
            </summary>
            <typeparam name="T">The type that this extension is applicable for.</typeparam>
            <param name="collection">The enumerable instance that this extension operates on.</param>
            <param name="action">The action executed for each iten in the enumerable.</param>
        </member>
        <member name="M:NCommon.Extensions.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerator{``0},System.Action{``0})">
            <summary>
            ForEach extension that enumerates over all items in an <see cref="T:System.Collections.Generic.IEnumerator`1"/> and executes 
            an action.
            </summary>
            <typeparam name="T">The type that this extension is applicable for.</typeparam>
            <param name="collection">The enumerator instance that this extension operates on.</param>
            <param name="action">The action executed for each iten in the enumerable.</param>
        </member>
        <member name="M:NCommon.Extensions.CollectionExtensions.TryForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            For Each extension that enumerates over a enumerable collection and attempts to execute 
            the provided action delegate and it the action throws an exception, continues enumerating.
            </summary>
            <typeparam name="T">The type that this extension is applicable for.</typeparam>
            <param name="collection">The IEnumerable instance that ths extension operates on.</param>
            <param name="action">The action excecuted for each item in the enumerable.</param>
        </member>
        <member name="M:NCommon.Extensions.CollectionExtensions.TryForEach``1(System.Collections.Generic.IEnumerator{``0},System.Action{``0})">
            <summary>
            For each extension that enumerates over an enumerator and attempts to execute the provided
            action delegate and if the action throws an exception, continues executing.
            </summary>
            <typeparam name="T">The type that this extension is applicable for.</typeparam>
            <param name="enumerator">The IEnumerator instace</param>
            <param name="action">The action executed for each item in the enumerator.</param>
        </member>
        <member name="T:NCommon.Expressions.MemberAccessPropertyInfoVisitor">
            <summary>
            Inherits from the <see cref="T:NCommon.Expressions.ExpressionVisitor"/> base class and implements a expression visitor
            that gets a <see cref="T:System.Reflection.PropertyInfo"/> that represents the property representd by the expresion.
            </summary>
        </member>
        <member name="T:NCommon.Expressions.ExpressionVisitor">
            <summary>
            Provides virtual methods that can be used by subclasses to parse an expression tree.
            </summary>
            <remarks>
            This class actually already exists in the System.Core assembly...as an internal class.
            I can only speculate as to why it is internal, but it is obviously much too dangerous
            for anyone outside of Microsoft to be using...
            </remarks>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
             Visits and performs transaction on an expression.
            </summary>
            <param name="exp">The <see cref="T:System.Linq.Expressions.Expression"/> to visit and transform.</param>
            <returns>A transformed <see cref="T:System.Linq.Expressions.Expression"/> instance.</returns>
            <exception cref="T:System.NotSupportedException">Throws when a expression or sub-expression is not supported
             by the Expression visitor.</exception>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visit a bindingExp expression.
            </summary>
            <param name="bindingExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            Visit a element initialized expression.
            </summary>
            <param name="elementInitExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visit a Unary expression.
            </summary>
            <param name="unaryExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visit a binary expression.
            </summary>
            <param name="binaryExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visit a Is expression.
            </summary>
            <param name="typeBinaryExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visit a constant expression.
            </summary>
            <param name="constantExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visit a conditional expression.
            </summary>
            <param name="conditionalExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visit a parameter expression.
            </summary>
            <param name="parameterExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visit a member access expression.
            </summary>
            <param name="methodExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visit a method call expression.
            </summary>
            <param name="methodCallExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visit a list expression.
            </summary>
            <param name="listExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visit a member assignment expression.
            </summary>
            <param name="assignmentExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visit a member binding expression.
            </summary>
            <param name="memberBindingExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visit a member list binding expression.
            </summary>
            <param name="listBindingExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visint a binding list expression.
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Visit a element list initializer expression
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visit a expression that represents a lambda.
            </summary>
            <param name="lambdaExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visit a new expresson (ctor)
            </summary>
            <param name="newExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visit a member initialization expression.
            </summary>
            <param name="memberInitExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visit a list initializatio expression.
            </summary>
            <param name="listInitExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visit a new array expression.
            </summary>
            <param name="newArrayExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visit a invocation expression.
            </summary>
            <param name="invocationExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.MemberAccessPropertyInfoVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Overriden. Overrides all MemberAccess to build a path string.
            </summary>
            <param name="methodExp"></param>
            <returns></returns>
        </member>
        <member name="P:NCommon.Expressions.MemberAccessPropertyInfoVisitor.Property">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> that the expression represents.
            </summary>
        </member>
        <member name="T:NCommon.Data.UnitOfWorkManager">
            <summary>
             Gets an instances of <see cref="T:NCommon.Data.ITransactionManager"/>.
            </summary>
        </member>
        <member name="M:NCommon.Data.UnitOfWorkManager.#cctor">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:NCommon.Data.UnitOfWorkManager"/>.
            </summary>
        </member>
        <member name="M:NCommon.Data.UnitOfWorkManager.SetTransactionManagerProvider(System.Func{NCommon.Data.ITransactionManager})">
            <summary>
             Sets a <see cref="T:System.Func`1"/> of <see cref="T:NCommon.Data.ITransactionManager"/> that the 
             <see cref="T:NCommon.Data.UnitOfWorkManager"/> uses to get an instance of <see cref="T:NCommon.Data.ITransactionManager"/>
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:NCommon.Data.UnitOfWorkManager.CurrentTransactionManager">
            <summary>
            Gets the current <see cref="T:NCommon.Data.ITransactionManager"/>.
            </summary>
        </member>
        <member name="P:NCommon.Data.UnitOfWorkManager.CurrentUnitOfWork">
            <summary>
            Gets the current <see cref="T:NCommon.Data.IUnitOfWork"/> instance.
            </summary>
        </member>
        <member name="T:NCommon.Context.Impl.InstanceContextWrapper">
            <summary>
            Default implementation of <see cref="T:NCommon.Context.IInstanceContext"/>
            </summary>
        </member>
        <member name="T:NCommon.Context.IInstanceContext">
            <summary>
            Interface wrapper that wraps a <see cref="T:System.ServiceModel.InstanceContext"/> instance.
            </summary>
        </member>
        <member name="M:NCommon.Context.IInstanceContext.IncrementManualFlowControlLimit(System.Int32)">
            <summary>
            Increments the manual control flow limit
            </summary>
            <param name="limit">int. The flow control limit to increment to.</param>
        </member>
        <member name="M:NCommon.Context.IInstanceContext.GetServiceInstance">
            <summary>
            Gets the service instance.
            </summary>
            <returns>object.</returns>
        </member>
        <member name="M:NCommon.Context.IInstanceContext.GetServiceInstance(System.ServiceModel.Channels.Message)">
            <summary>
            Gets the service instance for the specified <see cref="T:System.ServiceModel.Channels.Message"/>.
            </summary>
            <param name="message">A <see cref="T:System.ServiceModel.Channels.Message"/> instance.</param>
            <returns>object.</returns>
        </member>
        <member name="P:NCommon.Context.IInstanceContext.Extensions">
            <summary>
            Gets the underlying <see cref="T:System.ServiceModel.IExtensionCollection`1"/> from the underlying
            <see cref="T:System.ServiceModel.InstanceContext"/>.
            </summary>
        </member>
        <member name="P:NCommon.Context.IInstanceContext.Host">
            <summary>
            Gets a <see cref="T:NCommon.Context.IServiceHost"/> instance that wraps the underlying <see cref="T:System.ServiceModel.ServiceHost"/>
            from the InstanceContxt.
            </summary>
        </member>
        <member name="P:NCommon.Context.IInstanceContext.IncomingChannels">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.ICollection`1"/> instance containing a list of incoming channels
            from the wrapped <see cref="T:System.ServiceModel.InstanceContext"/>.
            </summary>
        </member>
        <member name="P:NCommon.Context.IInstanceContext.ManualFlowControlLimit">
            <summary>
            Gets or sets the manual flow control limit on the wrapped <see cref="T:System.ServiceModel.InstanceContext"/>.
            </summary>
        </member>
        <member name="P:NCommon.Context.IInstanceContext.OutgoinChannels">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.ICollection`1"/> instance containing a list of outgoing channels
            from the wrapped <see cref="T:System.ServiceModel.InstanceContext"/>.
            </summary>
        </member>
        <member name="P:NCommon.Context.IInstanceContext.SynchronizationContext">
            <summary>
            Gets the <see cref="P:NCommon.Context.IInstanceContext.SynchronizationContext"/> from the wrapped <see cref="T:System.ServiceModel.InstanceContext"/>.
            </summary>
        </member>
        <member name="M:NCommon.Context.Impl.InstanceContextWrapper.#ctor(System.ServiceModel.InstanceContext)">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:NCommon.Context.Impl.InstanceContextWrapper"/> class.
            </summary>
            <param name="context">The <see cref="T:System.ServiceModel.InstanceContext"/> instance to wrap.</param>
        </member>
        <member name="M:NCommon.Context.Impl.InstanceContextWrapper.IncrementManualFlowControlLimit(System.Int32)">
            <summary>
            Increments the manual control flow limit
            </summary>
            <param name="limit">int. The flow control limit to increment to.</param>
        </member>
        <member name="M:NCommon.Context.Impl.InstanceContextWrapper.GetServiceInstance">
            <summary>
            Gets the service instance.
            </summary>
            <returns>object.</returns>
        </member>
        <member name="M:NCommon.Context.Impl.InstanceContextWrapper.GetServiceInstance(System.ServiceModel.Channels.Message)">
            <summary>
            Gets the service instance for the specified <see cref="T:System.ServiceModel.Channels.Message"/>.
            </summary>
            <param name="message">A <see cref="T:System.ServiceModel.Channels.Message"/> instance.</param>
            <returns>object.</returns>
        </member>
        <member name="P:NCommon.Context.Impl.InstanceContextWrapper.Extensions">
            <summary>
            Gets the underlying <see cref="T:System.ServiceModel.IExtensionCollection`1"/> from the underlying
            <see cref="T:System.ServiceModel.InstanceContext"/>.
            </summary>
        </member>
        <member name="P:NCommon.Context.Impl.InstanceContextWrapper.Host">
            <summary>
            Gets a <see cref="T:NCommon.Context.IServiceHost"/> instance that wraps the underlying <see cref="T:System.ServiceModel.ServiceHost"/>
            from the InstanceContxt.
            </summary>
        </member>
        <member name="P:NCommon.Context.Impl.InstanceContextWrapper.IncomingChannels">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.ICollection`1"/> instance containing a list of incoming channels
            from the wrapped <see cref="T:System.ServiceModel.InstanceContext"/>.
            </summary>
        </member>
        <member name="P:NCommon.Context.Impl.InstanceContextWrapper.ManualFlowControlLimit">
            <summary>
            Gets or sets the manual flow control limit on the wrapped <see cref="T:System.ServiceModel.InstanceContext"/>.
            </summary>
        </member>
        <member name="P:NCommon.Context.Impl.InstanceContextWrapper.OutgoinChannels">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.ICollection`1"/> instance containing a list of outgoing channels
            from the wrapped <see cref="T:System.ServiceModel.InstanceContext"/>.
            </summary>
        </member>
        <member name="P:NCommon.Context.Impl.InstanceContextWrapper.SynchronizationContext">
            <summary>
            Gets the <see cref="P:NCommon.Context.Impl.InstanceContextWrapper.SynchronizationContext"/> from the wrapped <see cref="T:System.ServiceModel.InstanceContext"/>.
            </summary>
        </member>
        <member name="T:NCommon.Util.GuidCombGenerator">
            <summary>
            Implementation borrowed from Rhino.Queues.
            </summary>
        </member>
        <member name="M:NCommon.Util.GuidCombGenerator.Generate">
            <summary>
             Generates a GuidComb.
            </summary>
            <returns><see cref="T:System.Guid"/></returns>
        </member>
        <member name="T:NCommon.State.ISessionState">
            <summary>
            Interface implemented by session state providers that store and retrieve state data for the current executing session.
            </summary>
        </member>
        <member name="M:NCommon.State.ISessionState.Get``1(System.Object)">
            <summary>
            Gets state data stored with the specified key.
            </summary>
            <typeparam name="T">The type of data to retrieve.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
            <returns>An instance of <typeparamref name="T"/> or null if not found.</returns>
        </member>
        <member name="M:NCommon.State.ISessionState.Put``1(System.Object,``0)">
            <summary>
            Puts state data into the session state with the specified key.
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
        </member>
        <member name="M:NCommon.State.ISessionState.Remove``1(System.Object)">
            <summary>
            Removes state data stored in the session state with the specified key.
            </summary>
            <typeparam name="T">The type of data to remove.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
        </member>
        <member name="T:NCommon.State.Impl.HttpRuntimeCache">
            <summary>
            Implementation of <see cref="T:NCommon.State.ICacheState"/> that uses the ASP.Net runtime cache.
            </summary>
        </member>
        <member name="T:NCommon.State.ICacheState">
            <summary>
            Interface implemented by cache state providers that store and retrieve state data for the cache.
            </summary>
        </member>
        <member name="M:NCommon.State.ICacheState.Get``1(System.Object)">
            <summary>
            Gets state data stored with the specified key.
            </summary>
            <typeparam name="T">The type of data to retrieve.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
            <returns>An instance of <typeparamref name="T"/> or null if not found.</returns>
        </member>
        <member name="M:NCommon.State.ICacheState.Put``1(System.Object,``0)">
            <summary>
            Puts state data into the cache state with the specified key with no expiration.
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
        </member>
        <member name="M:NCommon.State.ICacheState.Put``1(System.Object,``0,System.DateTime)">
            <summary>
            Puts state data into the cache state with the specified key with the specified absolute expiration.
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
            <param name="absoluteExpiration">The date and time when the absolute data from the cache will be removed.</param>
        </member>
        <member name="M:NCommon.State.ICacheState.Put``1(System.Object,``0,System.TimeSpan)">
            <summary>
            Puts state data into the cache state with the specified key with the specified sliding expiration
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
            <param name="slidingExpiration">A <see cref="T:System.TimeSpan"/> specifying the sliding expiration policy.</param>
        </member>
        <member name="M:NCommon.State.ICacheState.Remove``1(System.Object)">
            <summary>
            Removes state data stored in the cache state with the specified key.
            </summary>
            <typeparam name="T">The type of data to remove.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
        </member>
        <member name="M:NCommon.State.Impl.HttpRuntimeCache.Get``1(System.Object)">
            <summary>
            Gets state data stored with the specified key.
            </summary>
            <typeparam name="T">The type of data to retrieve.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
            <returns>An instance of <typeparamref name="T"/> or null if not found.</returns>
        </member>
        <member name="M:NCommon.State.Impl.HttpRuntimeCache.Put``1(System.Object,``0)">
            <summary>
            Puts state data into the cache state with the specified key with no expiration.
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
        </member>
        <member name="M:NCommon.State.Impl.HttpRuntimeCache.Put``1(System.Object,``0,System.DateTime)">
            <summary>
            Puts state data into the cache state with the specified key with the specified absolute expiration.
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
            <param name="absoluteExpiration">The date and time when the absolute data from the cache will be removed.</param>
        </member>
        <member name="M:NCommon.State.Impl.HttpRuntimeCache.Put``1(System.Object,``0,System.TimeSpan)">
            <summary>
            Puts state data into the cache state with the specified key with the specified sliding expiration
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
            <param name="slidingExpiration">A <see cref="T:System.TimeSpan"/> specifying the sliding expiration policy.</param>
        </member>
        <member name="M:NCommon.State.Impl.HttpRuntimeCache.Remove``1(System.Object)">
            <summary>
            Removes state data stored in the cache state with the specified key.
            </summary>
            <typeparam name="T">The type of data to remove.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
        </member>
        <member name="T:NCommon.State.Impl.DefaultLocalStateSelector">
            <summary>
            Default implementation of <see cref="T:NCommon.State.ILocalStateSelector"/>.
            </summary>
        </member>
        <member name="T:NCommon.State.ILocalStateSelector">
            <summary>
            Interface that is implemented by a custom selector that creates instances of <see cref="T:NCommon.State.ILocalState"/>.
            </summary>
        </member>
        <member name="M:NCommon.State.ILocalStateSelector.Get">
            <summary>
            Gets the implementation of <see cref="T:NCommon.State.ILocalState"/> to use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCommon.State.Impl.DefaultLocalStateSelector.#ctor(NCommon.Context.IContext)">
            <summary>
            Default Constructor.
            Creates an instance of <see cref="T:NCommon.State.Impl.DefaultLocalStateSelector"/> class.
            </summary>
            <param name="context">An instance of <see cref="T:NCommon.Context.IContext"/>.</param>
        </member>
        <member name="M:NCommon.State.Impl.DefaultLocalStateSelector.Get">
            <summary>
            Gets the <see cref="T:NCommon.State.ILocalState"/> instance to use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NCommon.Expressions.MemberAccessPathVisitor">
            <summary>
            Inherits from the <see cref="T:NCommon.Expressions.ExpressionVisitor"/> base class and implements a expression visitor
            that builds up a path string that represents meber access in a Expression.
            </summary>
        </member>
        <member name="M:NCommon.Expressions.MemberAccessPathVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Overriden. Overrides all MemberAccess to build a path string.
            </summary>
            <param name="methodExp"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Expressions.MemberAccessPathVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Overriden. Throws a <see cref="T:System.NotSupportedException"/> when a method call is encountered.
            </summary>
            <param name="methodCallExp"></param>
            <returns></returns>
        </member>
        <member name="P:NCommon.Expressions.MemberAccessPathVisitor.Path">
            <summary>
            Gets the path analyzed by the visitor.
            </summary>
        </member>
        <member name="T:NCommon.Context.Impl.OperationContextWrapper">
            <summary>
            Default implementation of <see cref="T:NCommon.Context.IOperationContext"/>
            </summary>
        </member>
        <member name="T:NCommon.Context.IOperationContext">
            <summary>
            Interface wrapper that wraps a <see cref="T:System.ServiceModel.OperationContext"/>
            </summary>
        </member>
        <member name="M:NCommon.Context.IOperationContext.GetCallbackChannel``1">
            <summary>
            Gets a channel to the client instance that called the current operation.
            </summary>
            <typeparam name="T">The type of channel used to callback the client.</typeparam>
            <returns>A channel to the client instance that called the operation of the type specified in the
            <see cref="P:System.ServiceModel.ServiceContractAttribute.CallbackContract"/> property.</returns>
        </member>
        <member name="M:NCommon.Context.IOperationContext.SetTransactionComplete">
            <summary>
            Commits the current executing transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">. Thrown when there is no transaction in the current context.</exception>
        </member>
        <member name="P:NCommon.Context.IOperationContext.Channel">
            <summary>
            Gets the channel associated with the current <see cref="T:System.ServiceModel.OperationContext"/> object.
            </summary>
            <value>A <see cref="T:System.ServiceModel.IContextChannel"/> associated with the current <see cref="T:System.ServiceModel.OperationContext"/></value>
        </member>
        <member name="P:NCommon.Context.IOperationContext.EndpointDispatcher">
            <summary>
            Gets the <see cref="P:NCommon.Context.IOperationContext.EndpointDispatcher"/> for the endpoint to inspect.
            </summary>
            <value>The <see cref="P:NCommon.Context.IOperationContext.EndpointDispatcher"/> to inspect.</value>
        </member>
        <member name="P:NCommon.Context.IOperationContext.Extensions">
            <summary>
            Gets a <see cref="T:System.ServiceModel.IExtensionCollection`1"/> of service extensions for the current message context.
            </summary>
            <value>A <see cref="T:System.ServiceModel.IExtensionCollection`1"/> of service extensions.</value>
        </member>
        <member name="P:NCommon.Context.IOperationContext.HasSupportingTokens">
            <summary>
            Gets a value indicating weather the incoming message has supporting tokens.
            </summary>
            <value>True if the incoming message has supporting tokents, else false.</value>
        </member>
        <member name="P:NCommon.Context.IOperationContext.Host">
            <summary>
            Gets a <see cref="T:NCommon.Context.IServiceHost"/> wrapper for the current service object.
            </summary>
            <value>A <see cref="T:NCommon.Context.IServiceHost"/> wrapper.</value>
        </member>
        <member name="P:NCommon.Context.IOperationContext.IncomingMessageHeaders">
            <summary>
            Gets the incoming message headers for the <see cref="T:System.ServiceModel.OperationContext"/>.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Channels.MessageHeader"/> instance that contains the incoming message headers.</value>
        </member>
        <member name="P:NCommon.Context.IOperationContext.IncomingMessageProperties">
            <summary>
            Gets the message properties for the incoming message in the <see cref="T:System.ServiceModel.OperationContext"/>.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Channels.MessageProperties"/> instance that contains the message properties for
            the incoming message.</value>
        </member>
        <member name="P:NCommon.Context.IOperationContext.IncomingMessageVersion">
            <summary>
            Gets the incoming SOAP messsage version for the <see cref="T:System.ServiceModel.OperationContext"/>.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Channels.MessageVersion"/> representing the SOAP version of the incoming message.</value>
        </member>
        <member name="P:NCommon.Context.IOperationContext.InstanceContext">
            <summary>
            Gets a <see cref="T:NCommon.Context.IInstanceContext"/> wrapper that manages the current service instance.
            </summary>
            <value>A <see cref="T:NCommon.Context.IInstanceContext"/> wrapper for the current service instance.</value>
        </member>
        <member name="P:NCommon.Context.IOperationContext.OutgoingMessageHeaders">
            <summary>
            Gets the outgoing message headers for the <see cref="T:System.ServiceModel.OperationContext"/>.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Channels.MessageHeader"/> instance containing the outgoing message headers
            for the <see cref="T:System.ServiceModel.OperationContext"/>.</value>
        </member>
        <member name="P:NCommon.Context.IOperationContext.OutgoingMessageProperties">
            <summary>
            Gets the outgoing message properties for the <see cref="T:System.ServiceModel.OperationContext"/>.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Channels.MessageProperties"/> instance containing the outgoing message properties
            for the <see cref="T:System.ServiceModel.OperationContext"/>.</value>
        </member>
        <member name="P:NCommon.Context.IOperationContext.RequestContext">
            <summary>
            Gets the <see cref="P:NCommon.Context.IOperationContext.RequestContext"/> implementation for the current executing method.
            </summary>
            <value>A <see cref="P:NCommon.Context.IOperationContext.RequestContext"/> instance, or null if there is no request context.</value>
        </member>
        <member name="P:NCommon.Context.IOperationContext.SessionId">
            <summary>
            Gets a string used to identify the current session.
            </summary>
            <value>A string used to identify the current session.</value>
        </member>
        <member name="P:NCommon.Context.IOperationContext.SupportingTokens">
            <summary>
            Gets the collection of security tokens.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.ICollection`1"/>.</value>
        </member>
        <member name="M:NCommon.Context.Impl.OperationContextWrapper.#ctor(System.ServiceModel.OperationContext)">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:NCommon.Context.Impl.OperationContextWrapper"/> class.
            </summary>
            <param name="context">The <see cref="T:System.ServiceModel.OperationContext"/> to wrap.</param>
        </member>
        <member name="M:NCommon.Context.Impl.OperationContextWrapper.GetCallbackChannel``1">
            <summary>
            Gets a channel to the client instance that called the current operation.
            </summary>
            <typeparam name="T">The type of channel used to callback the client.</typeparam>
            <returns>A channel to the client instance that called the operation of the type specified in the
            <see cref="P:System.ServiceModel.ServiceContractAttribute.CallbackContract"/> property.</returns>
        </member>
        <member name="M:NCommon.Context.Impl.OperationContextWrapper.SetTransactionComplete">
            <summary>
            Commits the current executing transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">. Thrown when there is no transaction in the current context.</exception>
        </member>
        <member name="P:NCommon.Context.Impl.OperationContextWrapper.Channel">
            <summary>
            Gets the channel associated with the current <see cref="T:System.ServiceModel.OperationContext"/> object.
            </summary>
            <value>A <see cref="T:System.ServiceModel.IContextChannel"/> associated with the current <see cref="T:System.ServiceModel.OperationContext"/></value>
        </member>
        <member name="P:NCommon.Context.Impl.OperationContextWrapper.EndpointDispatcher">
            <summary>
            Gets the <see cref="P:NCommon.Context.Impl.OperationContextWrapper.EndpointDispatcher"/> for the endpoint to inspect.
            </summary>
            <value>The <see cref="P:NCommon.Context.Impl.OperationContextWrapper.EndpointDispatcher"/> to inspect.</value>
        </member>
        <member name="P:NCommon.Context.Impl.OperationContextWrapper.Extensions">
            <summary>
            Gets a <see cref="T:System.ServiceModel.IExtensionCollection`1"/> of service extensions for the current message context.
            </summary>
            <value>A <see cref="T:System.ServiceModel.IExtensionCollection`1"/> of service extensions.</value>
        </member>
        <member name="P:NCommon.Context.Impl.OperationContextWrapper.HasSupportingTokens">
            <summary>
            Gets a value indicating weather the incoming message has supporting tokens.
            </summary>
            <value>True if the incoming message has supporting tokents, else false.</value>
        </member>
        <member name="P:NCommon.Context.Impl.OperationContextWrapper.Host">
            <summary>
            Gets a <see cref="T:NCommon.Context.IServiceHost"/> wrapper for the current service object.
            </summary>
            <value>A <see cref="T:NCommon.Context.IServiceHost"/> wrapper.</value>
        </member>
        <member name="P:NCommon.Context.Impl.OperationContextWrapper.IncomingMessageHeaders">
            <summary>
            Gets the incoming message headers for the <see cref="T:System.ServiceModel.OperationContext"/>.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Channels.MessageHeader"/> instance that contains the incoming message headers.</value>
        </member>
        <member name="P:NCommon.Context.Impl.OperationContextWrapper.IncomingMessageProperties">
            <summary>
            Gets the message properties for the incoming message in the <see cref="T:System.ServiceModel.OperationContext"/>.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Channels.MessageProperties"/> instance that contains the message properties for
            the incoming message.</value>
        </member>
        <member name="P:NCommon.Context.Impl.OperationContextWrapper.IncomingMessageVersion">
            <summary>
            Gets the incoming SOAP messsage version for the <see cref="T:System.ServiceModel.OperationContext"/>.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Channels.MessageVersion"/> representing the SOAP version of the incoming message.</value>
        </member>
        <member name="P:NCommon.Context.Impl.OperationContextWrapper.InstanceContext">
            <summary>
            Gets a <see cref="T:NCommon.Context.IInstanceContext"/> wrapper that manages the current service instance.
            </summary>
            <value>A <see cref="T:NCommon.Context.IInstanceContext"/> wrapper for the current service instance.</value>
        </member>
        <member name="P:NCommon.Context.Impl.OperationContextWrapper.OutgoingMessageHeaders">
            <summary>
            Gets the outgoing message headers for the <see cref="T:System.ServiceModel.OperationContext"/>.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Channels.MessageHeader"/> instance containing the outgoing message headers
            for the <see cref="T:System.ServiceModel.OperationContext"/>.</value>
        </member>
        <member name="P:NCommon.Context.Impl.OperationContextWrapper.OutgoingMessageProperties">
            <summary>
            Gets the outgoing message properties for the <see cref="T:System.ServiceModel.OperationContext"/>.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Channels.MessageProperties"/> instance containing the outgoing message properties
            for the <see cref="T:System.ServiceModel.OperationContext"/>.</value>
        </member>
        <member name="P:NCommon.Context.Impl.OperationContextWrapper.RequestContext">
            <summary>
            Gets the <see cref="P:NCommon.Context.Impl.OperationContextWrapper.RequestContext"/> implementation for the current executing method.
            </summary>
            <value>A <see cref="P:NCommon.Context.Impl.OperationContextWrapper.RequestContext"/> instance, or null if there is no request context.</value>
        </member>
        <member name="P:NCommon.Context.Impl.OperationContextWrapper.SessionId">
            <summary>
            Gets a string used to identify the current session.
            </summary>
            <value>A string used to identify the current session.</value>
        </member>
        <member name="P:NCommon.Context.Impl.OperationContextWrapper.SupportingTokens">
            <summary>
            Gets the collection of security tokens.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.ICollection`1"/>.</value>
        </member>
        <member name="T:NCommon.Configure">
            <summary>
            Static configuration class that allows configuration of NCommon services.
            </summary>
        </member>
        <member name="M:NCommon.Configure.Using(NCommon.Configuration.IContainerAdapter)">
            <summary>
            Entry point to NCommon configuration.
            </summary>
            <param name="containerAdapter">The <see cref="T:NCommon.Configuration.IContainerAdapter"/> instance to use
            for component registration.</param>
            <returns>An instance of <see cref="T:NCommon.Configuration.INCommonConfig"/> that can be used to configure
            NCommon configuration.</returns> 
        </member>
        <member name="T:NCommon.Specifications.Specification`1">
            <summary>
            Provides a default implementation of the <see cref="T:NCommon.Specifications.ISpecification`1"/> interface.
            </summary>
            <remarks>
            The <see cref="T:NCommon.Specifications.Specification`1"/> implements Composite Specification pattern by overloading
            the &amp; and | (And, Or in VB.Net) operators to allow composing multiple specifications together.
            </remarks>
        </member>
        <member name="T:NCommon.Specifications.ISpecification`1">
            <summary>
            The <see cref="T:NCommon.Specifications.ISpecification`1"/> interface defines a basic contract to express specifications declaratively.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NCommon.Specifications.ISpecification`1.IsSatisfiedBy(`0)">
            <summary>
            Evaluates the specification against an entity of <typeparamref name="T"/>.
            </summary>
            <param name="entity">The <typeparamref name="T"/> instance to evaluate the specificaton
            against.</param>
            <returns>Should return true if the specification was satisfied by the entity, else false. </returns>
        </member>
        <member name="P:NCommon.Specifications.ISpecification`1.Predicate">
            <summary>
            Gets the expression that encapsulates the criteria of the specification.
            </summary>
        </member>
        <member name="M:NCommon.Specifications.Specification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:NCommon.Specifications.Specification`1"/> instnace with the
            provided predicate expression.
            </summary>
            <param name="predicate">A predicate that can be used to check entities that
            satisfy the specification.</param>
        </member>
        <member name="M:NCommon.Specifications.Specification`1.IsSatisfiedBy(`0)">
            <summary>
            Evaluates the specification against an entity of <typeparamref name="T"/>.
            </summary>
            <param name="entity">The <typeparamref name="T"/> instance to evaluate the specificaton
            against.</param>
            <returns>Should return true if the specification was satisfied by the entity, else false. </returns>
        </member>
        <member name="M:NCommon.Specifications.Specification`1.op_BitwiseAnd(NCommon.Specifications.Specification{`0},NCommon.Specifications.Specification{`0})">
            <summary>
            Overloads the &amp; operator and combines two <see cref="T:NCommon.Specifications.Specification`1"/> in a Boolean And expression
            and returns a new see cref="Specification{TEntity}"/&gt;.
            </summary>
            <param name="leftHand">The left hand <see cref="T:NCommon.Specifications.Specification`1"/> to combine.</param>
            <param name="rightHand">The right hand <see cref="T:NCommon.Specifications.Specification`1"/> to combine.</param>
            <returns>The combined <see cref="T:NCommon.Specifications.Specification`1"/> instance.</returns>
        </member>
        <member name="M:NCommon.Specifications.Specification`1.op_BitwiseOr(NCommon.Specifications.Specification{`0},NCommon.Specifications.Specification{`0})">
            <summary>
            Overloads the &amp; operator and combines two <see cref="T:NCommon.Specifications.Specification`1"/> in a Boolean Or expression
            and returns a new see cref="Specification{TEntity}"/&gt;.
            </summary>
            <param name="leftHand">The left hand <see cref="T:NCommon.Specifications.Specification`1"/> to combine.</param>
            <param name="rightHand">The right hand <see cref="T:NCommon.Specifications.Specification`1"/> to combine.</param>
            <returns>The combined <see cref="T:NCommon.Specifications.Specification`1"/> instance.</returns>
        </member>
        <member name="P:NCommon.Specifications.Specification`1.Predicate">
            <summary>
            Gets the expression that encapsulates the criteria of the specification.
            </summary>
        </member>
        <member name="T:NCommon.Events.Handles`1">
            <summary>
            Interface used by handlers of domain events.
            </summary>
            <typeparam name="T">A type of <see cref="T:NCommon.Events.DomainEvent"/></typeparam>
        </member>
        <member name="M:NCommon.Events.Handles`1.Handle(`0)">
            <summary>
            Method invoked when a domain event of <typeparamref name="T"/> is raised.
            </summary>
            <param name="event"></param>
        </member>
        <member name="T:NCommon.Configuration.DefaultUnitOfWorkConfiguration">
            <summary>
             Implementation of <see cref="T:NCommon.Configuration.IUnitOfWorkConfiguration"/>.
            </summary>
        </member>
        <member name="T:NCommon.Configuration.IUnitOfWorkConfiguration">
            <summary>
            Configuration settings for <see cref="T:NCommon.Data.UnitOfWorkScope"/> instances in NCommon.
            </summary>
        </member>
        <member name="M:NCommon.Configuration.IUnitOfWorkConfiguration.Configure(NCommon.Configuration.IContainerAdapter)">
            <summary>
            Configures <see cref="T:NCommon.Data.UnitOfWorkScope"/> settings.
            </summary>
            <param name="containerAdapter">The <see cref="T:NCommon.Configuration.IContainerAdapter"/> instance.</param>
        </member>
        <member name="M:NCommon.Configuration.IUnitOfWorkConfiguration.AutoCompleteScope">
            <summary>
            Sets <see cref="T:NCommon.Data.UnitOfWorkScope"/> instances to auto complete when disposed.
            </summary>
        </member>
        <member name="M:NCommon.Configuration.IUnitOfWorkConfiguration.WithDefaultIsolation(System.Transactions.IsolationLevel)">
            <summary>
            Sets the default isolation level used by <see cref="T:NCommon.Data.UnitOfWorkScope"/>.
            </summary>
            <param name="isolationLevel"></param>
        </member>
        <member name="M:NCommon.Configuration.DefaultUnitOfWorkConfiguration.Configure(NCommon.Configuration.IContainerAdapter)">
            <summary>
            Configures <see cref="T:NCommon.Data.UnitOfWorkScope"/> settings.
            </summary>
            <param name="containerAdapter">The <see cref="T:NCommon.Configuration.IContainerAdapter"/> instance.</param>
        </member>
        <member name="M:NCommon.Configuration.DefaultUnitOfWorkConfiguration.AutoCompleteScope">
            <summary>
            Sets <see cref="T:NCommon.Data.UnitOfWorkScope"/> instances to auto complete when disposed.
            </summary>
        </member>
        <member name="M:NCommon.Configuration.DefaultUnitOfWorkConfiguration.WithDefaultIsolation(System.Transactions.IsolationLevel)">
            <summary>
            Sets the default isolation level used by <see cref="T:NCommon.Data.UnitOfWorkScope"/>.
            </summary>
            <param name="isolationLevel"></param>
        </member>
        <member name="T:NCommon.Context.Impl.Context">
            <summary>
            Default implementation of <see cref="T:NCommon.Context.IContext"/>
            </summary>
        </member>
        <member name="T:NCommon.Context.IContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:NCommon.Context.IContext.IsWebApplication">
            <summary>
            Gets weather the current application is a web based application.
            </summary>
            <value>True if the application is a web based application, else false.</value>
        </member>
        <member name="P:NCommon.Context.IContext.IsWcfApplication">
            <summary>
            Gets weather the current application is a WCF based application.
            </summary>
            <value>True if the application is a WCF based application, else false.</value>
        </member>
        <member name="P:NCommon.Context.IContext.IsAspNetCompatEnabled">
            <summary>
            Gets weather ASP.Net compatability is enabled for the current WCF service.
            </summary>
            <value>True if <see cref="P:NCommon.Context.IContext.IsWcfApplication"/> is true and ASP.Net compatability is enabled for
            the current service, else false.</value>
        </member>
        <member name="P:NCommon.Context.IContext.HttpContext">
            <summary>
            Gets a <see cref="T:System.Web.HttpContextBase"/> that wraps the current <see cref="P:NCommon.Context.IContext.HttpContext"/>
            </summary>
            <value>An <see cref="T:System.Web.HttpContextBase"/> instnace if <see cref="P:NCommon.Context.IContext.IsWebApplication"/> is true,
            else null.</value>
        </member>
        <member name="P:NCommon.Context.IContext.OperationContext">
            <summary>
            Gets a <see cref="T:NCommon.Context.IOperationContext"/> that wraps the current <see cref="P:NCommon.Context.IContext.OperationContext"/>
            for a WCF based application.
            </summary>
            <value>An  <see cref="T:NCommon.Context.IOperationContext"/> instance if <see cref="P:NCommon.Context.IContext.IsWcfApplication"/> is true,
            else null.</value>
        </member>
        <member name="P:NCommon.Context.Impl.Context.IsWebApplication">
            <summary>
            Gets weather the current application is a web based application.
            </summary>
            <value>True if the application is a web based application, else false.</value>
        </member>
        <member name="P:NCommon.Context.Impl.Context.IsWcfApplication">
            <summary>
            Gets weather the current application is a WCF based application.
            </summary>
            <value>True if the application is a WCF based application, else false.</value>
        </member>
        <member name="P:NCommon.Context.Impl.Context.IsAspNetCompatEnabled">
            <summary>
            Gets weather ASP.Net compatability is enabled for the current WCF service.
            </summary>
            <value>True if <see cref="P:NCommon.Context.Impl.Context.IsWcfApplication"/> is true and ASP.Net compatability is enabled for
            the current service, else false.</value>
        </member>
        <member name="P:NCommon.Context.Impl.Context.HttpContext">
            <summary>
            Gets a <see cref="T:System.Web.HttpContextBase"/> that wraps the current <see cref="P:NCommon.Context.Impl.Context.HttpContext"/>
            </summary>
            <value>An <see cref="T:System.Web.HttpContextBase"/> instnace if <see cref="P:NCommon.Context.Impl.Context.IsWebApplication"/> is true,
            else null.</value>
        </member>
        <member name="P:NCommon.Context.Impl.Context.OperationContext">
            <summary>
            Gets a <see cref="T:NCommon.Context.IOperationContext"/> that wraps the current <see cref="P:NCommon.Context.Impl.Context.OperationContext"/>
            for a WCF based application.
            </summary>
            <value>An  <see cref="T:NCommon.Context.IOperationContext"/> instance if <see cref="P:NCommon.Context.Impl.Context.IsWcfApplication"/> is true,
            else null.</value>
        </member>
        <member name="T:NCommon.State.ILocalState">
            <summary>
            Interface implemented by local state providers that store and retrieve state data for the current thread or operation context.
            </summary>
        </member>
        <member name="M:NCommon.State.ILocalState.Get``1(System.Object)">
            <summary>
            Gets state data stored with the specified key.
            </summary>
            <typeparam name="T">The type of data to retrieve.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
            <returns>An instance of <typeparamref name="T"/> or null if not found.</returns>
        </member>
        <member name="M:NCommon.State.ILocalState.Put``1(System.Object,``0)">
            <summary>
            Puts state data into the local state with the specified key.
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
        </member>
        <member name="M:NCommon.State.ILocalState.Remove``1(System.Object)">
            <summary>
            Removes state data stored in the local state with the specified key.
            </summary>
            <typeparam name="T">The type of data to remove.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
        </member>
        <member name="T:NCommon.State.Impl.SessionStateWrapper">
            <summary>
            Implementation of <see cref="T:NCommon.State.ISessionState"/> that wraps a <see cref="T:NCommon.State.ISessionState"/> instance
            from a <see cref="T:NCommon.State.ISessionStateSelector"/>.
            </summary>
        </member>
        <member name="M:NCommon.State.Impl.SessionStateWrapper.#ctor(NCommon.State.ISessionStateSelector)">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:NCommon.State.Impl.SessionStateWrapper"/> class.
            </summary>
            <param name="selector">A <see cref="T:NCommon.State.ISessionStateSelector"/> instance used to retrieve the underlying
            <see cref="T:NCommon.State.ISessionState"/> instance.</param>
        </member>
        <member name="M:NCommon.State.Impl.SessionStateWrapper.Get``1(System.Object)">
            <summary>
            Gets state data stored with the specified key.
            </summary>
            <typeparam name="T">The type of data to retrieve.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
            <returns>An instance of <typeparamref name="T"/> or null if not found.</returns>
        </member>
        <member name="M:NCommon.State.Impl.SessionStateWrapper.Put``1(System.Object,``0)">
            <summary>
            Puts state data into the session state with the specified key.
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
        </member>
        <member name="M:NCommon.State.Impl.SessionStateWrapper.Remove``1(System.Object)">
            <summary>
            Removes state data stored in the session state with the specified key.
            </summary>
            <typeparam name="T">The type of data to remove.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
        </member>
        <member name="T:NCommon.State.Impl.LocalStateWrapper">
            <summary>
            Implementation of <see cref="T:NCommon.State.ILocalState"/> that wraps a <see cref="T:NCommon.State.ILocalState"/> instance
            from a <see cref="T:NCommon.State.ILocalStateSelector"/>.
            </summary>
        </member>
        <member name="M:NCommon.State.Impl.LocalStateWrapper.#ctor(NCommon.State.ILocalStateSelector)">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:NCommon.State.Impl.LocalStateWrapper"/> class.
            </summary>
            <param name="selector">A <see cref="T:NCommon.State.ILocalStateSelector"/> instance used by the wrapper
            to obtain the underlying <see cref="T:NCommon.State.ILocalState"/> instance.</param>
        </member>
        <member name="M:NCommon.State.Impl.LocalStateWrapper.Get``1(System.Object)">
            <summary>
            Gets state data stored with the specified key.
            </summary>
            <typeparam name="T">The type of data to retrieve.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
            <returns>An instance of <typeparamref name="T"/> or null if not found.</returns>
        </member>
        <member name="M:NCommon.State.Impl.LocalStateWrapper.Put``1(System.Object,``0)">
            <summary>
            Puts state data into the local state with the specified key.
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
        </member>
        <member name="M:NCommon.State.Impl.LocalStateWrapper.Remove``1(System.Object)">
            <summary>
            Removes state data stored in the local state with the specified key.
            </summary>
            <typeparam name="T">The type of data to remove.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
        </member>
        <member name="T:NCommon.Data.RepositoryBase`1">
            <summary>
             A base class for implementors of <see cref="T:NCommon.Data.IRepository`1"/>.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:NCommon.Data.IRepository`1">
            <summary>
            The <see cref="T:NCommon.Data.IRepository`1"/> interface defines a standard contract that repository
            components should implement.
            </summary>
            <typeparam name="TEntity">The type of entity that the repository encapsulates.</typeparam>
        </member>
        <member name="M:NCommon.Data.IRepository`1.Save(`0)">
            <summary>
            Marks the changes of an existing entity to be saved to the store.
            </summary>
            <param name="entity">An instance of <typeparamref name="TEntity"/> that should be
            updated in the database.</param>
        </member>
        <member name="M:NCommon.Data.IRepository`1.Delete(`0)">
            <summary>
            Marks the changes of an existing entity to be saved to the store.
            </summary>
            <param name="entity">An instance of <typeparamref name="TEntity"/> that should be
            updated in the database.</param>
            <remarks>Implementors of this method must handle the Update scneario. </remarks>
        </member>
        <member name="M:NCommon.Data.IRepository`1.Query(NCommon.Specifications.ISpecification{`0})">
            <summary>
            Querries the repository based on the provided specification and returns results that
            are only satisfied by the specification.
            </summary>
            <param name="specification">A <see cref="T:NCommon.Specifications.ISpecification`1"/> instnace used to filter results
            that only satisfy the specification.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that can be used to enumerate over the results
            of the query.</returns>
        </member>
        <member name="M:NCommon.Data.IRepository`1.Detach(`0)">
            <summary>
            Detaches a instance from the repository.
            </summary>
            <param name="entity">The entity instance, currently being tracked via the repository, to detach.</param>
            <exception cref="T:System.NotSupportedException">Implentors should throw the NotImplementedException if Detaching
            entities is not supported.</exception>
        </member>
        <member name="M:NCommon.Data.IRepository`1.Attach(`0)">
            <summary>
            Attaches a detached entity, previously detached via the <see cref="M:NCommon.Data.IRepository`1.Detach(`0)"/> method.
            </summary>
            <param name="entity">The entity instance to attach back to the repository.</param>
            <exception cref="T:System.NotSupportedException">Implentors should throw the NotImplementedException if Attaching
            entities is not supported.</exception>
        </member>
        <member name="M:NCommon.Data.IRepository`1.Refresh(`0)">
            <summary>
            Refreshes a entity instance.
            </summary>
            <param name="entity">The entity to refresh.</param>
            <exception cref="T:System.NotSupportedException">Implementors should throw the NotImplementedException if Refreshing
            entities is not supported.</exception>
        </member>
        <member name="M:NCommon.Data.IRepository`1.With(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Instructs the repository to eager load a child entities. 
            </summary>
            <param name="path">The path of the child entities to eager load.</param>
            <remarks>Implementors should throw a <see cref="T:System.NotSupportedException"/> if the underling provider
            does not support eager loading of entities</remarks>
        </member>
        <member name="M:NCommon.Data.IRepository`1.With``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Instructs the repository to eager load entities that may be in the repository's association path.
            </summary>
            <param name="path">The path of the child entities to eager load.</param>
            <remarks>Implementors should throw a <see cref="T:System.NotSupportedException"/> if the underling provider
            does not support eager loading of entities</remarks>
        </member>
        <member name="M:NCommon.Data.IRepository`1.Eagerly(System.Action{NCommon.Data.Language.RepositoryEagerFetchingStrategy{`0}})">
            <summary>
             Instructs to repository to eager load child entities.
            </summary>
            <param name="strategyActions">A <see cref="T:System.Action`1"/> that specifies
             the paths to eagerly fetch.</param>
            <returns>The <see cref="T:NCommon.Data.IRepository`1"/> instance.</returns>
        </member>
        <member name="M:NCommon.Data.IRepository`1.Cached(System.String)">
            <summary>
            Intructs the repository to cache the current 
            </summary>
            <param name="cachedQueryName"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Data.IRepository`1.For``1">
            <summary>
            Defines the service context under which the repository will execute.
            </summary>
            <typeparam name="TService">The service type that defines the context of the repository.</typeparam>
            <returns>The same <see cref="T:NCommon.Data.IRepository`1"/> instance.</returns>
            <remarks>
            Implementors should perform context specific actions within this method call and return
            the exact same instance.
            </remarks>
        </member>
        <member name="M:NCommon.Data.IRepository`1.SetBatchSize(System.Int32)">
            <summary>
            Sets a batch size on the repository.
            </summary>
            <param name="size">int. A positive integer representing the batch size.</param>
            <remarks>Use this property when persisteing large amounts of data to batch insert statements.</remarks>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.GetCurrentUnitOfWork``1">
            <summary>
            Gets the <see cref="T:NCommon.Data.IUnitOfWork"/> that the repository should use.
            </summary>
            <typeparam name="TUnitOfWork">A compatible unit of work instance.</typeparam>
            <returns></returns>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.Save(`0)">
            <summary>
            Marks the changes of an existing entity to be saved to the store.
            </summary>
            <param name="entity">An instance of <typeparamref name="TEntity"/> that should be
            updated in the database.</param>
            <remarks>Implementors of this method must handle the Update scneario. </remarks>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.Delete(`0)">
            <summary>
            Marks the entity instance to be deleted from the store.
            </summary>
            <param name="entity">An instance of <typeparamref name="TEntity"/> that should be deleted.</param>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.Detach(`0)">
            <summary>
            Detaches a instance from the repository.
            </summary>
            <param name="entity">The entity instance, currently being tracked via the repository, to detach.</param>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.Attach(`0)">
            <summary>
            Attaches a detached entity, previously detached via the <see cref="M:NCommon.Data.IRepository`1.Detach(`0)"/> method.
            </summary>
            <param name="entity">The entity instance to attach back to the repository.</param>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.Refresh(`0)">
            <summary>
            Refreshes a entity instance.
            </summary>
            <param name="entity">The entity to refresh.</param>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.With(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Instructs the repository to eager load a child entities. 
            </summary>
            <param name="path">The path of the child entities to eager load.</param>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.With``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Instructs the repository to eager load entities that may be in the repository's association path.
            </summary>
            <param name="path">The path of the child entities to eager load.</param>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.Eagerly(System.Action{NCommon.Data.Language.RepositoryEagerFetchingStrategy{`0}})">
            <summary>
            Eagerly fetch associations on the entity.
            </summary>
            <param name="strategyActions">An <see cref="T:System.Action`1"/> delegate
            that specifies the eager fetching paths.</param>
            <returns>The <see cref="T:NCommon.Data.IRepository`1"/> instance.</returns>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.ApplyFetchingStrategy(System.Linq.Expressions.Expression[])">
            <summary>
            When overriden by inheriting classes, applies the fetching strategies on the repository.
            </summary>
            <param name="paths">An array of <see cref="P:NCommon.Data.RepositoryBase`1.Expression"/> containing the paths to
            eagerly fetch.</param>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.Cached(System.String)">
            <summary>
            Instructs the repository to cache the following query.
            </summary>
            <param name="cachedQueryName">string. The name to give to the cached query.</param>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.SetBatchSize(System.Int32)">
            <summary>
            Sets the batch size on the repository
            </summary>
            <param name="size">int. The batch size.</param>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.For``1">
            <summary>
            Defines the service context under which the repository will execute.
            </summary>
            <typeparam name="TService">The service type that defines the context of the repository.</typeparam>
            <returns>The same <see cref="T:NCommon.Data.IRepository`1"/> instance.</returns>
            <remarks>
            Gets all fetching strategies define for a service for the current type and configures the
            repository to use that fetching strategy. 
            </remarks>
        </member>
        <member name="M:NCommon.Data.RepositoryBase`1.Query(NCommon.Specifications.ISpecification{`0})">
            <summary>
            Querries the repository based on the provided specification and returns results that
            are only satisfied by the specification.
            </summary>
            <param name="specification">A <see cref="T:NCommon.Specifications.ISpecification`1"/> instnace used to filter results
            that only satisfy the specification.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that can be used to enumerate over the results
            of the query.</returns>
        </member>
        <member name="P:NCommon.Data.RepositoryBase`1.RepositoryQuery">
            <summary>
            Gets the <see cref="T:System.Linq.IQueryable`1"/> used by the <see cref="T:NCommon.Data.RepositoryBase`1"/> 
            to execute Linq queries.
            </summary>
            <value>A <see cref="T:System.Linq.IQueryable`1"/> instance.</value>
            <remarks>
            Inheritors of this base class should return a valid non-null <see cref="T:System.Linq.IQueryable`1"/> instance.
            </remarks>
        </member>
        <member name="P:NCommon.Data.RepositoryBase`1.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <returns>
            The <see cref="P:NCommon.Data.RepositoryBase`1.Expression"/> that is associated with this instance of <see cref="T:System.Linq.IQueryable"/>.
            </returns>
        </member>
        <member name="P:NCommon.Data.RepositoryBase`1.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.
            </returns>
        </member>
        <member name="P:NCommon.Data.RepositoryBase`1.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <returns>
            The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.
            </returns>
        </member>
        <member name="T:NCommon.Data.InMemoryRepository`1">
            <summary>
            An implementation of <see cref="T:NCommon.Data.RepositoryBase`1"/> that uses an inmemory
            collection.
            </summary>
            <typeparam name="TEntity">The entity type for which this repository was created.</typeparam>
            <remarks>This class can be used in Unit tests to represent an in memory repository.</remarks>
        </member>
        <member name="M:NCommon.Data.InMemoryRepository`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Default Constructor.
            Creats a new instance of the <see cref="T:NCommon.Data.InMemoryRepository`1"/> class.
            </summary>
            <param name="list">An optional list pre-populated with entities.</param>
        </member>
        <member name="M:NCommon.Data.InMemoryRepository`1.Save(`0)">
            <summary>
            Marks the changes of an existing entity to be saved to the store.
            </summary>
            <param name="entity">An instance of <typeparamref name="TEntity"/> that should be
            updated in the database.</param>
            <remarks>Implementors of this method must handle the Update scneario. </remarks>
        </member>
        <member name="M:NCommon.Data.InMemoryRepository`1.Delete(`0)">
            <summary>
            Marks the entity instance to be deleted from the store.
            </summary>
            <param name="entity">An instance of <typeparamref name="TEntity"/> that should be deleted.</param>
        </member>
        <member name="M:NCommon.Data.InMemoryRepository`1.Detach(`0)">
            <summary>
            Detaches a instance from the repository.
            </summary>
            <param name="entity">The entity instance, currently being tracked via the repository, to detach.</param>
        </member>
        <member name="M:NCommon.Data.InMemoryRepository`1.Attach(`0)">
            <summary>
            Attaches a detached entity, previously detached via the <see cref="M:NCommon.Data.IRepository`1.Detach(`0)"/> method.
            </summary>
            <param name="entity">The entity instance to attach back to the repository.</param>
        </member>
        <member name="M:NCommon.Data.InMemoryRepository`1.Refresh(`0)">
            <summary>
            Refreshes a entity instance.
            </summary>
            <param name="entity">The entity to refresh.</param>
        </member>
        <member name="M:NCommon.Data.InMemoryRepository`1.ApplyFetchingStrategy(System.Linq.Expressions.Expression[])">
            <summary>
            When overriden by inheriting classes, applies the fetching strategies on the repository.
            </summary>
            <param name="paths">An array of <see cref="T:System.Linq.Expressions.Expression"/> containing the paths to
            eagerly fetch.</param>
        </member>
        <member name="M:NCommon.Data.InMemoryRepository`1.Cached(System.String)">
            <summary>
            Instructs the repository to cache the following query.
            </summary>
            <param name="cachedQueryName">string. The name to give to the cached query.</param>
        </member>
        <member name="M:NCommon.Data.InMemoryRepository`1.SetBatchSize(System.Int32)">
            <summary>
            Sets the batch size on the repository
            </summary>
            <param name="size">int. The batch size.</param>
        </member>
        <member name="P:NCommon.Data.InMemoryRepository`1.RepositoryQuery">
            <summary>
            Gets the <see cref="T:System.Linq.IQueryable`1"/> used by the <see cref="T:NCommon.Data.RepositoryBase`1"/> 
            to execute Linq queries.
            </summary>
            <value>A <see cref="T:System.Linq.IQueryable`1"/> instance.</value>
        </member>
        <member name="T:NCommon.Data.Impl.UnitOfWorkTransaction">
            <summary>
            Encapsulates a unit of work transaction.
            </summary>
        </member>
        <member name="M:NCommon.Data.Impl.UnitOfWorkTransaction.#ctor(NCommon.Data.IUnitOfWork,System.Transactions.TransactionScope)">
            <summary>
             Default Constructor.
             Creates a new instance of the <see cref="T:NCommon.Data.Impl.UnitOfWorkTransaction"/> class.
            </summary>
            <param name="unitOfWork">The <see cref="T:NCommon.Data.IUnitOfWork"/> instance managed by the 
             <see cref="T:NCommon.Data.Impl.UnitOfWorkTransaction"/> instance.</param>
            <param name="transaction">The <see cref="T:System.Transactions.TransactionScope"/> instance managed by 
             the <see cref="T:NCommon.Data.Impl.UnitOfWorkTransaction"/> instance.</param>
        </member>
        <member name="M:NCommon.Data.Impl.UnitOfWorkTransaction.EnlistScope(NCommon.Data.IUnitOfWorkScope)">
            <summary>
            Attaches a <see cref="T:NCommon.Data.UnitOfWorkScope"/> instance to the 
            <see cref="T:NCommon.Data.Impl.UnitOfWorkTransaction"/> instance.
            </summary>
            <param name="scope">The <see cref="T:NCommon.Data.UnitOfWorkScope"/> instance to attach.</param>
        </member>
        <member name="M:NCommon.Data.Impl.UnitOfWorkTransaction.OnScopeCommitting(NCommon.Data.IUnitOfWorkScope)">
            <summary>
            Callback executed when an enlisted scope has comitted.
            </summary>
        </member>
        <member name="M:NCommon.Data.Impl.UnitOfWorkTransaction.OnScopeRollingBack(NCommon.Data.IUnitOfWorkScope)">
            <summary>
            Callback executed when an enlisted scope is rolledback.
            </summary>
        </member>
        <member name="M:NCommon.Data.Impl.UnitOfWorkTransaction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="E:NCommon.Data.Impl.UnitOfWorkTransaction.TransactionDisposing">
            <summary>
             Raised when the transaction is disposing.
            </summary>
        </member>
        <member name="P:NCommon.Data.Impl.UnitOfWorkTransaction.TransactionId">
            <summary>
             Gets the unique transaction id of the <see cref="T:NCommon.Data.Impl.UnitOfWorkTransaction"/> instance.
            </summary>
             <value>A <see cref="T:System.Guid"/> representing the unique id of the <see cref="T:NCommon.Data.Impl.UnitOfWorkTransaction"/> instance.</value>
        </member>
        <member name="P:NCommon.Data.Impl.UnitOfWorkTransaction.UnitOfWork">
            <summary>
            Gets the <see cref="T:NCommon.Data.IUnitOfWork"/> instance managed by the 
            <see cref="T:NCommon.Data.Impl.UnitOfWorkTransaction"/> instance.
            </summary>
        </member>
        <member name="T:NCommon.Context.Impl.ServiceHostWrapper">
            <summary>
            Default <see cref="T:NCommon.Context.IServiceHost"/> wrapper.
            </summary>
        </member>
        <member name="T:NCommon.Context.IServiceHost">
            <summary>
            Wrapper interface for <see cref="T:System.ServiceModel.ServiceHost"/>.
            </summary>
        </member>
        <member name="M:NCommon.Context.IServiceHost.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)">
            <summary>
            Adds a service endpoint to the service host with the specified contract, binding and address.
            </summary>
            <param name="implementedContract">The contract implemented by the endpoint.</param>
            <param name="binding">A <see cref="T:System.ServiceModel.Channels.Binding"/> instnace for the endpoint.</param>
            <param name="address">The address for the endpoint.</param>
            <returns>A <see cref="T:System.ServiceModel.Description.ServiceEndpoint"/> instance that was added to the service host.</returns>
        </member>
        <member name="M:NCommon.Context.IServiceHost.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)">
            <summary>
            Adds a service endpoint to the service host with the specified contract, binding and address.
            </summary>
            <param name="implementedContract">The contract implemented by the endpoint.</param>
            <param name="binding">A <see cref="T:System.ServiceModel.Channels.Binding"/> instnace for the endpoint.</param>
            <param name="address">The address for the endpoint.</param>
            <returns>A <see cref="T:System.ServiceModel.Description.ServiceEndpoint"/> instance that was added to the service host.</returns>
        </member>
        <member name="M:NCommon.Context.IServiceHost.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)">
            <summary>
            Adds a service endpoint to the service host with the specified contract, binding and address.
            </summary>
            <param name="implementedContract">The contract implemented by the endpoint.</param>
            <param name="binding">A <see cref="T:System.ServiceModel.Channels.Binding"/> instnace for the endpoint.</param>
            <param name="address">The address for the endpoint.</param>
            <param name="listenUri">The address at which the endpoint listens for incoming messages.</param>
            <returns>A <see cref="T:System.ServiceModel.Description.ServiceEndpoint"/> instance that was added to the service host.</returns>
        </member>
        <member name="M:NCommon.Context.IServiceHost.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)">
            <summary>
            Adds a service endpoint to the service host with the specified contract, binding and address.
            </summary>
            <param name="implementedContract">The contract implemented by the endpoint.</param>
            <param name="binding">A <see cref="T:System.ServiceModel.Channels.Binding"/> instnace for the endpoint.</param>
            <param name="address">The address for the endpoint.</param>
            <param name="listenUri">The address at which the endpoint listens for incoming messages.</param>
            <returns>A <see cref="T:System.ServiceModel.Description.ServiceEndpoint"/> instance that was added to the service host.</returns>
        </member>
        <member name="P:NCommon.Context.IServiceHost.Authorization">
            <summary>
            Gets the authorization behavior for the service.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Description.ServiceAuthorizationBehavior"/> for the service host.</value>
        </member>
        <member name="P:NCommon.Context.IServiceHost.BaseAddresses">
            <summary>
            Gets the base addresses used by the service host.
            </summary>
            <value>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> that contains the base addresses used by the service host.</value>
        </member>
        <member name="P:NCommon.Context.IServiceHost.ChannelDispatchers">
            <summary>
            Gets a collection of channel dispatchers used by he service host.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Dispatcher.ChannelDispatcherCollection"/> containing the channel dispatchers used by the service host.</value>
        </member>
        <member name="P:NCommon.Context.IServiceHost.CloseTimeout">
            <summary>
            Gets or sets the interval of time allowed for the service host to close.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> that specifies the interval of time allowed for the service host to close.</value>
        </member>
        <member name="P:NCommon.Context.IServiceHost.Credentials">
            <summary>
            Gets the crendentials for the service host.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Description.ServiceCredentials"/> instance.</value>
        </member>
        <member name="P:NCommon.Context.IServiceHost.Description">
            <summary>
            Gets the description of the service host.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Description.ServiceDescription"/> instance.</value>
        </member>
        <member name="P:NCommon.Context.IServiceHost.Extensions">
            <summary>
            Gets the extensions registered for the service host.
            </summary>
            <value>A <see cref="T:System.ServiceModel.IExtensionCollection`1"/> contianing extensions registered for the service host.</value>
        </member>
        <member name="P:NCommon.Context.IServiceHost.ManualFlowControlLimit">
            <summary>
            Gets or sets the flow control limit for messages recieved by the service host.
            </summary>
            <value>int. The flow control limit for messages recieved by the service host.</value>
        </member>
        <member name="P:NCommon.Context.IServiceHost.OpenTimeout">
            <summary>
            Gets or sets the interval of time allowed for the service host to open.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> that specifies the interval of time allowed for the service host to open.</value>
        </member>
        <member name="M:NCommon.Context.Impl.ServiceHostWrapper.#ctor(System.ServiceModel.ServiceHostBase)">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:NCommon.Context.Impl.ServiceHostWrapper"/> class.
            </summary>
            <param name="serviceHost">The <see cref="T:System.ServiceModel.ServiceHost"/> instance to wrap.</param>
        </member>
        <member name="M:NCommon.Context.Impl.ServiceHostWrapper.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)">
            <summary>
            Adds a service endpoint to the service host with the specified contract, binding and address.
            </summary>
            <param name="implementedContract">The contract implemented by the endpoint.</param>
            <param name="binding">A <see cref="T:System.ServiceModel.Channels.Binding"/> instnace for the endpoint.</param>
            <param name="address">The address for the endpoint.</param>
            <returns>A <see cref="T:System.ServiceModel.Description.ServiceEndpoint"/> instance that was added to the service host.</returns>
        </member>
        <member name="M:NCommon.Context.Impl.ServiceHostWrapper.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)">
            <summary>
            Adds a service endpoint to the service host with the specified contract, binding and address.
            </summary>
            <param name="implementedContract">The contract implemented by the endpoint.</param>
            <param name="binding">A <see cref="T:System.ServiceModel.Channels.Binding"/> instnace for the endpoint.</param>
            <param name="address">The address for the endpoint.</param>
            <returns>A <see cref="T:System.ServiceModel.Description.ServiceEndpoint"/> instance that was added to the service host.</returns>
        </member>
        <member name="M:NCommon.Context.Impl.ServiceHostWrapper.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)">
            <summary>
            Adds a service endpoint to the service host with the specified contract, binding and address.
            </summary>
            <param name="implementedContract">The contract implemented by the endpoint.</param>
            <param name="binding">A <see cref="T:System.ServiceModel.Channels.Binding"/> instnace for the endpoint.</param>
            <param name="address">The address for the endpoint.</param>
            <param name="listenUri">The address at which the endpoint listens for incoming messages.</param>
            <returns>A <see cref="T:System.ServiceModel.Description.ServiceEndpoint"/> instance that was added to the service host.</returns>
        </member>
        <member name="M:NCommon.Context.Impl.ServiceHostWrapper.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)">
            <summary>
            Adds a service endpoint to the service host with the specified contract, binding and address.
            </summary>
            <param name="implementedContract">The contract implemented by the endpoint.</param>
            <param name="binding">A <see cref="T:System.ServiceModel.Channels.Binding"/> instnace for the endpoint.</param>
            <param name="address">The address for the endpoint.</param>
            <param name="listenUri">The address at which the endpoint listens for incoming messages.</param>
            <returns>A <see cref="T:System.ServiceModel.Description.ServiceEndpoint"/> instance that was added to the service host.</returns>
        </member>
        <member name="P:NCommon.Context.Impl.ServiceHostWrapper.Authorization">
            <summary>
            Gets the authorization behavior for the service.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Description.ServiceAuthorizationBehavior"/> for the service host.</value>
        </member>
        <member name="P:NCommon.Context.Impl.ServiceHostWrapper.BaseAddresses">
            <summary>
            Gets the base addresses used by the service host.
            </summary>
            <value>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> that contains the base addresses used by the service host.</value>
        </member>
        <member name="P:NCommon.Context.Impl.ServiceHostWrapper.ChannelDispatchers">
            <summary>
            Gets a collection of channel dispatchers used by he service host.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Dispatcher.ChannelDispatcherCollection"/> containing the channel dispatchers used by the service host.</value>
        </member>
        <member name="P:NCommon.Context.Impl.ServiceHostWrapper.CloseTimeout">
            <summary>
            Gets or sets the interval of time allowed for the service host to close.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> that specifies the interval of time allowed for the service host to close.</value>
        </member>
        <member name="P:NCommon.Context.Impl.ServiceHostWrapper.Credentials">
            <summary>
            Gets the crendentials for the service host.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Description.ServiceCredentials"/> instance.</value>
        </member>
        <member name="P:NCommon.Context.Impl.ServiceHostWrapper.Description">
            <summary>
            Gets the description of the service host.
            </summary>
            <value>A <see cref="T:System.ServiceModel.Description.ServiceDescription"/> instance.</value>
        </member>
        <member name="P:NCommon.Context.Impl.ServiceHostWrapper.Extensions">
            <summary>
            Gets the extensions registered for the service host.
            </summary>
            <value>A <see cref="T:System.ServiceModel.IExtensionCollection`1"/> contianing extensions registered for the service host.</value>
        </member>
        <member name="P:NCommon.Context.Impl.ServiceHostWrapper.ManualFlowControlLimit">
            <summary>
            Gets or sets the flow control limit for messages recieved by the service host.
            </summary>
            <value>int. The flow control limit for messages recieved by the service host.</value>
        </member>
        <member name="P:NCommon.Context.Impl.ServiceHostWrapper.OpenTimeout">
            <summary>
            Gets or sets the interval of time allowed for the service host to open.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> that specifies the interval of time allowed for the service host to open.</value>
        </member>
        <member name="T:NCommon.State.Impl.HttpSessionState">
            <summary>
            Implementation of <see cref="T:NCommon.State.ISessionState"/> that uses the current HttpContext's session.
            </summary>
        </member>
        <member name="M:NCommon.State.Impl.HttpSessionState.#ctor(NCommon.Context.IContext)">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:NCommon.State.Impl.HttpSessionState"/> class.
            </summary>
            <param name="context">An instance of <see cref="T:NCommon.Context.IContext"/>.</param>
        </member>
        <member name="M:NCommon.State.Impl.HttpSessionState.Get``1(System.Object)">
            <summary>
            Gets state data stored with the specified key.
            </summary>
            <typeparam name="T">The type of data to retrieve.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
            <returns>An instance of <typeparamref name="T"/> or null if not found.</returns>
        </member>
        <member name="M:NCommon.State.Impl.HttpSessionState.Put``1(System.Object,``0)">
            <summary>
            Puts state data into the session state with the specified key.
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
        </member>
        <member name="M:NCommon.State.Impl.HttpSessionState.Remove``1(System.Object)">
            <summary>
            Removes state data stored in the session state with the specified key.
            </summary>
            <typeparam name="T">The type of data to remove.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
        </member>
        <member name="T:NCommon.Events.IDomainEvent">
            <summary>
            Marker interface that specifies a domain event.
            </summary>
        </member>
        <member name="T:NCommon.Data.ITransactionManager">
            <summary>
            Implemented by a transaction manager that manages unit of work transactions.
            </summary>
        </member>
        <member name="M:NCommon.Data.ITransactionManager.EnlistScope(NCommon.Data.IUnitOfWorkScope,System.Boolean)">
            <summary>
            Enlists a <see cref="T:NCommon.Data.UnitOfWorkScope"/> instance with the transaction manager.
            </summary>
            <param name="scope">bool. True if the scope should be enlisted in a new transaction, else
            false if the scope should participate in the existing transaction</param>
            <param name="newTransaction"></param>
        </member>
        <member name="P:NCommon.Data.ITransactionManager.CurrentUnitOfWork">
            <summary>
            Returns the current <see cref="T:NCommon.Data.IUnitOfWork"/>.
            </summary>
        </member>
        <member name="T:NCommon.Configuration.DefaultStateConfiguration">
            <summary>
            Default implementation of <see cref="T:NCommon.Configuration.IStateConfiguration"/> that allows configuring
            state storage in NCommon.
            </summary>
        </member>
        <member name="M:NCommon.Configuration.DefaultStateConfiguration.UseCustomCacheOf``1">
            <summary>
            Instructs NCommon to use the custom <see cref="T:NCommon.State.ICacheState"/> type as the cache storage.
            </summary>
            <typeparam name="T">A type that implements the <see cref="T:NCommon.State.ICacheState"/> interface.</typeparam>
            <returns>The <see cref="T:NCommon.Configuration.DefaultStateConfiguration"/> instance.</returns>
        </member>
        <member name="M:NCommon.Configuration.DefaultStateConfiguration.UseCustomSessionStateOf``1">
            <summary>
            Instructs NCommon to use a custom <see cref="T:NCommon.State.ISessionState"/> type as the session state storage.
            </summary>
            <typeparam name="T">A type that implements the <see cref="T:NCommon.State.ISessionState"/> interface.</typeparam>
            <returns>The <see cref="T:NCommon.Configuration.DefaultStateConfiguration"/> instance</returns>
        </member>
        <member name="M:NCommon.Configuration.DefaultStateConfiguration.UseCustomLocalStateOf``1">
            <summary>
            Instructs NCommon to use a custom <see cref="T:NCommon.State.ILocalState"/> type as the local state storage.
            </summary>
            <typeparam name="T">A type that implements the <see cref="T:NCommon.State.ILocalState"/> interface.</typeparam>
            <returns>The <see cref="T:NCommon.Configuration.DefaultStateConfiguration"/> instance.</returns>
        </member>
        <member name="M:NCommon.Configuration.DefaultStateConfiguration.UseCustomApplicationStateOf``1">
            <summary>
            Instructs NCommon to use a custom <see cref="T:NCommon.State.IApplicationState"/> type as the application stage storage.
            </summary>
            <typeparam name="T">A type that implements the <see cref="T:NCommon.State.IApplicationState"/> interface.</typeparam>
            <returns>The <see cref="T:NCommon.Configuration.DefaultStateConfiguration"/> instance.</returns>
        </member>
        <member name="M:NCommon.Configuration.DefaultStateConfiguration.Configure(NCommon.Configuration.IContainerAdapter)">
            <summary>
            Called by NCommon <see cref="M:NCommon.Configuration.DefaultStateConfiguration.Configure(NCommon.Configuration.IContainerAdapter)"/> to configure state storage.
            </summary>
            <param name="containerAdapter">The <see cref="T:NCommon.Configuration.IContainerAdapter"/> instance that can be
            used to register state storage components.</param>
        </member>
        <member name="T:NCommon.Configuration.IContainerAdapter">
            <summary>
             Base interface implemented by specific containers that allow registering components to an IoC container.
            </summary>
        </member>
        <member name="M:NCommon.Configuration.IContainerAdapter.Register``2">
            <summary>
            Registers a default implementation type for a service type.
            </summary>
            <typeparam name="TService">The <typeparamref name="TService"/> type representing the service
            for which the implementation type is registered. </typeparam>
            <typeparam name="TImplementation">The <typeparamref name="TImplementation"/> type representing
            the implementation registered for the <typeparamref name="TService"/></typeparam>
        </member>
        <member name="M:NCommon.Configuration.IContainerAdapter.Register``2(System.String)">
            <summary>
            Registers a named implementation type of a service type.
            </summary>
            <typeparam name="TService">The <typeparamref name="TService"/> type representing the service
            for which the implementation type is registered. </typeparam>
            <typeparam name="TImplementation">The <typeparamref name="TImplementation"/> type representing
            the implementation registered for the <typeparamref name="TService"/></typeparam>
            <param name="named">string. The service name with which the implementation is registered.</param>
        </member>
        <member name="M:NCommon.Configuration.IContainerAdapter.Register(System.Type,System.Type)">
            <summary>
            Registers a default implementation type for a service type.
            </summary>
            <param name="service"><see cref="T:System.Type"/>. The type representing the service for which the
             implementation type is registered.</param>
            <param name="implementation"><see cref="T:System.Type"/>. The type representing the implementation
            registered for the service type.</param>
        </member>
        <member name="M:NCommon.Configuration.IContainerAdapter.Register(System.Type,System.Type,System.String)">
            <summary>
            Registers a named implementation type for a service type.
            </summary>
            <param name="service"><see cref="T:System.Type"/>. The type representing the service for which the
            implementation type if registered.</param>
            <param name="implementation"><see cref="T:System.Type"/>. The type representing the implementaton
            registered for the service.</param>
            <param name="named">string. The service name with which the implementation is registered.</param>
        </member>
        <member name="M:NCommon.Configuration.IContainerAdapter.RegisterGeneric(System.Type,System.Type)">
            <summary>
             Registers a open generic implementation for a generic service type.
            </summary>
            <param name="service">The type representing the service for which the implementation type is registered.</param>
            <param name="implementation">The type representing the implementation registered for the service.</param>
        </member>
        <member name="M:NCommon.Configuration.IContainerAdapter.RegisterGeneric(System.Type,System.Type,System.String)">
            <summary>
             Registers a named open generic implementation for a generic service type.
            </summary>
            <param name="service">The type representing the service for which the implementation is registered.</param>
            <param name="implementation">The type representing the implementation registered for the service.</param>
            <param name="named">string. The service name with which the implementation is registerd.</param>
        </member>
        <member name="M:NCommon.Configuration.IContainerAdapter.RegisterSingleton``2">
            <summary>
            Registers a default implementation type for a service type as a singleton.
            </summary>
            <typeparam name="TService"><typeparamref name="TService"/>. The type representing the service
            for which the implementation type is registered as a singleton.</typeparam>
            <typeparam name="TImplementation"><typeparamref name="TImplementation"/>. The type representing
            the implementation that is registered as a singleton for the service type.</typeparam>
        </member>
        <member name="M:NCommon.Configuration.IContainerAdapter.RegisterSingleton``2(System.String)">
            <summary>
            Registers a named implementation type for a service type as a singleton.
            </summary>
            <typeparam name="TService"><typeparamref name="TService"/>. The type representing the service
            for which the implementation type is registered as a singleton.</typeparam>
            <typeparam name="TImplementation"><typeparamref name="TImplementation"/>. The type representing
            the implementation that is registered as a singleton for the service type.</typeparam>
            <param name="named">string. The service name with which the implementation is registerd.</param>
        </member>
        <member name="M:NCommon.Configuration.IContainerAdapter.RegisterSingleton(System.Type,System.Type)">
            <summary>
            Registers a default implementation type for a service type as a singleton.
            </summary>
            <param name="service"><see cref="T:System.Type"/>. The type representing the service
            for which the implementation type is registered as a singleton.</param>
            <param name="implementation"><see cref="T:System.Type"/>. The type representing
            the implementation that is registered as a singleton for the service type.</param>
        </member>
        <member name="M:NCommon.Configuration.IContainerAdapter.RegisterSingleton(System.Type,System.Type,System.String)">
            <summary>
            Registers a named implementation type for a service type as a singleton.
            </summary>
            <param name="service"><see cref="T:System.Type"/>. The type representing the service
            for which the implementation type is registered as a singleton.</param>
            <param name="implementation"><see cref="T:System.Type"/>. The type representing
            the implementation that is registered as a singleton for the service type.</param>
            <param name="named">string. The service name with which the implementation is registered.</param>
        </member>
        <member name="M:NCommon.Configuration.IContainerAdapter.RegisterInstance``1(``0)">
            <summary>
            Registers an instance as an implementation for a service type.
            </summary>
            <typeparam name="TService"><typeparamref name="TService"/>. The type representing
            the service for which the instance is registered.</typeparam>
            <param name="instance">An instance of type <typeparamref name="TService"/> that is
            registered as an instance for <typeparamref name="TService"/>.</param>
        </member>
        <member name="M:NCommon.Configuration.IContainerAdapter.RegisterInstance``1(``0,System.String)">
            <summary>
            Registers an named instance as an implementation for a service type.
            </summary>
            <typeparam name="TService"><typeparamref name="TService"/>. The type representing
            the service for which the instance is registered.</typeparam>
            <param name="instance">An instance of type <typeparamref name="TService"/> that is
            registered as an instance for <typeparamref name="TService"/>.</param>
            <param name="named">string. The service name with which the implementation is registered.</param>
        </member>
        <member name="M:NCommon.Configuration.IContainerAdapter.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers an instance as an implementation for a service type.
            </summary>
            <param name="service"><see cref="T:System.Type"/>. The type representing
            the service for which the instance is registered.</param>
            <param name="instance">An instance of <paramref name="service"/> that is
            registered as an instance for the service.</param>
        </member>
        <member name="M:NCommon.Configuration.IContainerAdapter.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            Registers a named instance as an implementation for a service type.
            </summary>
            <param name="service"><see cref="T:System.Type"/>. The type representing
            the service for which the instance is registered.</param>
            <param name="instance">An instance of <paramref name="service"/> that is
            registered as an instance for the service.</param>
            <param name="named">string. The service name with which the implementation is registered.</param>
        </member>
        <member name="T:NCommon.State.IApplicationState">
            <summary>
            Interface implemented by application state providers that store and retrieve application state data.
            </summary>
        </member>
        <member name="M:NCommon.State.IApplicationState.Get``1(System.Object)">
            <summary>
            Gets state data stored with the specified key.
            </summary>
            <typeparam name="T">The type of data to retrieve.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
            <returns>An instance of <typeparamref name="T"/> or null if not found.</returns>
        </member>
        <member name="M:NCommon.State.IApplicationState.Put``1(System.Object,``0)">
            <summary>
            Puts state data into the application state with the specified key.
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
        </member>
        <member name="M:NCommon.State.IApplicationState.Remove``1(System.Object)">
            <summary>
            Removes state data stored in the application state with the specified key.
            </summary>
            <typeparam name="T">The type of data to remove.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
        </member>
        <member name="T:NCommon.Data.IUnitOfWorkFactory">
            <summary>
            Factory interface that the <see cref="T:NCommon.Data.UnitOfWorkScope"/> uses to create instances of
            <see cref="T:NCommon.Data.IUnitOfWork"/>
            </summary>
        </member>
        <member name="M:NCommon.Data.IUnitOfWorkFactory.Create">
            <summary>
            Creates a new instance of <see cref="T:NCommon.Data.IUnitOfWork"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NCommon.Data.IUnitOfWork">
            <summary>
            A unit of work contract that that commits / flushes changes to the store
            within a single transaction. The commit / flush should be called when the
            implementation is disposed.
            </summary>
        </member>
        <member name="M:NCommon.Data.IUnitOfWork.Flush">
            <summary>
            Flushes the changes made in the unit of work to the data store.
            </summary>
        </member>
        <member name="T:NCommon.Rules.IValidationRule`1">
            <summary>
            Provides a contract that defines a validation rule that provides validation logic  for an entity.
            </summary>
            <typeparam name="TEntity">The type of entity this validation rule is applicable for.</typeparam>
        </member>
        <member name="M:NCommon.Rules.IValidationRule`1.Validate(`0)">
            <summary>
            Validates whether the entity violates the validation rule or not.
            </summary>
            <param name="entity">The <typeparamref name="TEntity"/> entity instance to validate.</param>
            <returns>Should return true if the entity instance is valid, else false.</returns>
        </member>
        <member name="P:NCommon.Rules.IValidationRule`1.ValidationMessage">
            <summary>
            Gets the message of the validation rule.
            </summary>
        </member>
        <member name="P:NCommon.Rules.IValidationRule`1.ValidationProperty">
            <summary>
            Gets a generic or specific name of a property that was validated.
            </summary>
        </member>
        <member name="T:NCommon.Rules.IBusinessRulesEvaluator`1">
            <summary>
            Defines an interface implemented by a business rule evaluator for an entity.
            </summary>
            <typeparam name="TEntity">The entity type that the business rules are applicable for.</typeparam>
        </member>
        <member name="M:NCommon.Rules.IBusinessRulesEvaluator`1.Evauluate(`0)">
            <summary>
            Evaluates a business rules against an entity.
            </summary>
            <param name="entity">A <typeparamref name="TEntity"/> instance against which the business
            rules are evaluated.</param>
        </member>
        <member name="T:NCommon.Data.Language.EagerFetchingPath`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NCommon.Data.Language.IEagerFetchingPath`1">
            <summary>
             Represents an eagerly fetched path.
            </summary>
            <typeparam name="T">The entity type being eagerly fetched.</typeparam>
        </member>
        <member name="M:NCommon.Data.Language.IEagerFetchingPath`1.And``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
             Specify an eager fetching path on <typeparamref name="T"/>.
            </summary>
            <param name="path"></param>
            <typeparam name="TChild"></typeparam>
            <returns>The eagerly fetched path.</returns>
        </member>
        <member name="M:NCommon.Data.Language.EagerFetchingPath`1.#ctor(System.Collections.Generic.IList{System.Linq.Expressions.Expression})">
            <summary>
             Default Constructor.
             Creates a new instance of the <see cref="T:NCommon.Data.Language.EagerFetchingPath`1"/> instance.
            </summary>
            <param name="paths"></param>
        </member>
        <member name="M:NCommon.Data.Language.EagerFetchingPath`1.And``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
             Specify an eager fetching path on <typeparamref name="T"/>.
            </summary>
            <param name="path"></param>
            <typeparam name="TChild"></typeparam>
            <returns>The eagerly fetched path.</returns>
        </member>
        <member name="T:NCommon.Data.Impl.TransactionScopeHelper">
            <summary>
            Helper class to create <see cref="T:System.Transactions.TransactionScope"/> instances.
            </summary>
        </member>
        <member name="M:NCommon.Data.Impl.TransactionScopeHelper.CreateScope(System.Transactions.IsolationLevel)">
            <summary>
            Creates a <see cref="T:System.Transactions.TransactionScope"/> with the specified isolation level.
            </summary>
            <param name="isolationLevel">The <see cref="T:System.Transactions.IsolationLevel"/> of the scope.</param>
            <returns>A <see cref="T:System.Transactions.TransactionScope"/> instance.</returns>
            <remarks>If an ambient transaction with the same isolation level exists, this method
            will create a new instance of <see cref="T:System.Transactions.TransactionScope"/> that is part of the ambient
            transaction, else it will create a new scope with the specified isolation level.</remarks>
        </member>
        <member name="M:NCommon.Data.Impl.TransactionScopeHelper.CreateNewScope(System.Transactions.IsolationLevel)">
            <summary>
            Creates a <see cref="T:System.Transactions.TransactionScope"/> with the specified isolation level and
            does not enlist as part of an existing ambient transaction.
            </summary>
            <param name="isolationLevel">The <see cref="T:System.Transactions.IsolationLevel"/> of the scope.</param>
            <returns>An instance of <see cref="T:System.Transactions.TransactionScope"/>.</returns>
        </member>
        <member name="T:NCommon.Data.Impl.TransactionManager">
            <summary>
            Default implementation of <see cref="T:NCommon.Data.ITransactionManager"/> interface.
            </summary>
        </member>
        <member name="M:NCommon.Data.Impl.TransactionManager.#ctor">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:NCommon.Data.Impl.TransactionManager"/> class.
            </summary>
        </member>
        <member name="M:NCommon.Data.Impl.TransactionManager.EnlistScope(NCommon.Data.IUnitOfWorkScope,System.Boolean)">
            <summary>
            Enlists a <see cref="T:NCommon.Data.UnitOfWorkScope"/> instance with the transaction manager.
            </summary>
            <param name="scope">bool. True if the scope should be enlisted in a new transaction, else
            false if the scope should participate in the existing transaction</param>
            <param name="newTransaction"></param>
        </member>
        <member name="M:NCommon.Data.Impl.TransactionManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:NCommon.Data.Impl.TransactionManager.CurrentUnitOfWork">
            <summary>
            Gets the current <see cref="T:NCommon.Data.IUnitOfWork"/> instance.
            </summary>
        </member>
        <member name="P:NCommon.Data.Impl.TransactionManager.CurrentTransaction">
            <summary>
            Gets the current <see cref="T:NCommon.Data.Impl.UnitOfWorkTransaction"/> instance.
            </summary>
        </member>
        <member name="T:NCommon.Util.ConnectionString">
            <summary>
             Utility class that helps get connection stirngs from the configuration file that contain
             machine names as identifiers for the connection strings.
            </summary>
        </member>
        <member name="M:NCommon.Util.ConnectionString.Default">
            <summary>
            Gets the default connection string for the application. 
            </summary>
            <returns>string. The default connection stirng of the application.</returns>
            <remarks>
            This methods attemps to find a app setting named "DefaultConnectionStringKey" in the application's configuration file. This
            setting should contain the name of the connection string defined in the &lt;connectionStrings&gt; that will be used as the
            application's default connection string.
            </remarks>
        </member>
        <member name="M:NCommon.Util.ConnectionString.Get">
            <summary>
            Gets a connection stirng that can be used for the current machine, or if no applicable connection string found
            then gets the default connection string by calling <see cref="M:NCommon.Util.ConnectionString.Default"/>.
            </summary>
            <returns>string. A connection stirng applicable for the current machine, or the default connection string.</returns>
        </member>
        <member name="M:NCommon.Util.ConnectionString.Get(System.String)">
            <summary>
            Gets a connection stirng that can be used for the current machine and specific database name, 
            or if no applicable connection string found then gets the default connection string by calling <see cref="M:NCommon.Util.ConnectionString.Default"/>.
            </summary>
            <param name="forDatabase">The database name for which the connection string is looked up.</param>
            <returns>string. A connection stirng applicable for the current machine, or the default connection string.</returns>
            <remarks>
            When connection strings are specified for multi-database scenarios, the naming convention of [MachineName]_[DatabaseName] is
            used. For e.g. if value of <paramref name="forDatabase"/> is OrderDB and current machine name is MachineA, then
            this method will look for a machine connection string entry in the config file named MachineA_OrderDB.
            </remarks>
        </member>
        <member name="T:NCommon.State.Impl.State">
            <summary>
            Default implementation of <see cref="T:NCommon.State.IState"/>.
            </summary>
        </member>
        <member name="M:NCommon.State.Impl.State.#ctor(NCommon.State.IApplicationState,NCommon.State.ILocalState,NCommon.State.ISessionState,NCommon.State.ICacheState)">
            <summary>
            Default Constructor.
            Creates a new instance of <see cref="T:NCommon.State.IState"/> class.
            </summary>
            <param name="applicationState">An instance of <see cref="T:NCommon.State.IApplicationState"/> that is used to store
            application state data.</param>
            <param name="localState">An instance of <see cref="T:NCommon.State.ILocalState"/> that is used to store local
            state data.</param>
            <param name="sessionState">An instance of <see cref="T:NCommon.State.ISessionState"/> that is used to store session
            state data.</param>
            <param name="cacheState">An instance of <see cref="T:NCommon.State.ICacheState"/> that is used to store cache
            state data.</param>
        </member>
        <member name="P:NCommon.State.Impl.State.Application">
            <summary>
            Gets the application specific state.
            </summary>
        </member>
        <member name="P:NCommon.State.Impl.State.Local">
            <summary>
            Gets the thread local / request local specific state.
            </summary>
        </member>
        <member name="P:NCommon.State.Impl.State.Session">
            <summary>
            Gets the session specific state.
            </summary>
        </member>
        <member name="P:NCommon.State.Impl.State.Cache">
            <summary>
            Gets the cache specific state.
            </summary>
        </member>
        <member name="T:NCommon.State.Impl.ApplicationState">
            <summary>
             Default implementation of <see cref="T:NCommon.State.IApplicationState"/>
            </summary>
        </member>
        <member name="M:NCommon.State.Impl.ApplicationState.Get``1(System.Object)">
            <summary>
            Gets state data stored with the specified key.
            </summary>
            <typeparam name="T">The type of data to retrieve.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
            <returns>An instance of <typeparamref name="T"/> or null if not found.</returns>
        </member>
        <member name="M:NCommon.State.Impl.ApplicationState.Put``1(System.Object,``0)">
            <summary>
            Puts state data into the application state with the specified key.
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
        </member>
        <member name="M:NCommon.State.Impl.ApplicationState.Remove``1(System.Object)">
            <summary>
            Removes state data stored in the application state with the specified key.
            </summary>
            <typeparam name="T">The type of data to remove.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
        </member>
        <member name="T:NCommon.Rules.SpecificationRuleBase`1">
            <summary>
            Base implementation that uses <see cref="T:NCommon.Specifications.ISpecification`1"/> instances that provide the logic to check if the
            rule is satisfied.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:NCommon.Rules.SpecificationRuleBase`1.#ctor(NCommon.Specifications.ISpecification{`0})">
            <summary>
            Default Constructor. 
            Protected. Must be called by implementors.
            </summary>
            <param name="rule">A <see cref="T:NCommon.Specifications.ISpecification`1"/> instance that specifies the rule.</param>
        </member>
        <member name="M:NCommon.Rules.SpecificationRuleBase`1.IsSatisfied(`0)">
            <summary>
            Checks if the entity instance satisfies this rule.
            </summary>
            <param name="entity">The <typeparamref name="TEntity"/> insance.</param>
            <returns>bool. True if the rule is satsified, else false.</returns>
        </member>
        <member name="T:NCommon.Configuration.IDataConfiguration">
            <summary>
            Base interface implemented by specific data configurators that configure NCommon data providers.
            </summary>
        </member>
        <member name="M:NCommon.Configuration.IDataConfiguration.Configure(NCommon.Configuration.IContainerAdapter)">
            <summary>
            Called by NCommon <see cref="M:NCommon.Configuration.IDataConfiguration.Configure(NCommon.Configuration.IContainerAdapter)"/> to configure data providers.
            </summary>
            <param name="containerAdapter">The <see cref="T:NCommon.Configuration.IContainerAdapter"/> instance that allows
            registering components.</param>
        </member>
        <member name="T:NCommon.State.Impl.WcfSessionState">
            <summary>
            Implementation of <see cref="T:NCommon.State.ISessionState"/> that stores session data in the current wcf session.
            </summary>
        </member>
        <member name="M:NCommon.State.Impl.WcfSessionState.#ctor(NCommon.Context.IContext)">
            <summary>
            Default Constructor.
            Creates a new instance of <see cref="T:NCommon.State.Impl.WcfSessionState"/> class.
            </summary>
            <param name="context">An instance of <see cref="T:NCommon.Context.IContext"/>.</param>
        </member>
        <member name="M:NCommon.State.Impl.WcfSessionState.Get``1(System.Object)">
            <summary>
            Gets state data stored with the specified key.
            </summary>
            <typeparam name="T">The type of data to retrieve.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
            <returns>An instance of <typeparamref name="T"/> or null if not found.</returns>
        </member>
        <member name="M:NCommon.State.Impl.WcfSessionState.Put``1(System.Object,``0)">
            <summary>
            Puts state data into the session state with the specified key.
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
        </member>
        <member name="M:NCommon.State.Impl.WcfSessionState.Remove``1(System.Object)">
            <summary>
            Removes state data stored in the session state with the specified key.
            </summary>
            <typeparam name="T">The type of data to remove.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
        </member>
        <member name="T:NCommon.State.Impl.WcfSessionState.WcfSessionStatExtension">
            <summary>
            Implementation of <see cref="T:System.ServiceModel.IExtension`1"/> of type <see cref="T:System.ServiceModel.InstanceContext"/> that stores
            session state data in the current <see cref="T:System.ServiceModel.InstanceContext"/>.
            </summary>
        </member>
        <member name="M:NCommon.State.Impl.WcfSessionState.WcfSessionStatExtension.Add(System.String,System.Object)">
            <summary>
            Adds state data with the given key.
            </summary>
            <param name="key">string. The unique key.</param>
            <param name="instance">object. The state data to store.</param>
        </member>
        <member name="M:NCommon.State.Impl.WcfSessionState.WcfSessionStatExtension.Get(System.String)">
            <summary>
            Gets state data stored with the specified unique key.
            </summary>
            <param name="key">string. The unique key.</param>
            <returns>object. A non-null reference if the data is found, else null.</returns>
        </member>
        <member name="M:NCommon.State.Impl.WcfSessionState.WcfSessionStatExtension.Remove(System.String)">
            <summary>
            Removes state data stored with the specified unique key.
            </summary>
            <param name="key">string. The unique key.</param>
        </member>
        <member name="T:NCommon.Rules.ValidationResult">
            <summary>
            Contains the result of a <see cref="M:NCommon.Rules.IEntityValidator`1.Validate(`0)"/> method call.
            </summary>
        </member>
        <member name="M:NCommon.Rules.ValidationResult.AddError(NCommon.Rules.ValidationError)">
            <summary>
            Adds a validation error into the result.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:NCommon.Rules.ValidationResult.RemoveError(NCommon.Rules.ValidationError)">
            <summary>
            Removes a validation error from the result.
            </summary>
            <param name="error"></param>
        </member>
        <member name="P:NCommon.Rules.ValidationResult.IsValid">
            <summary>
            Gets wheater the validation operation on an entity was valid or not.
            </summary>
        </member>
        <member name="P:NCommon.Rules.ValidationResult.Errors">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that can be used to enumerate over
            the validation errors as a result of a <see cref="M:NCommon.Rules.IEntityValidator`1.Validate(`0)"/> method
            call.
            </summary>
        </member>
        <member name="T:NCommon.Events.DomainEvent">
            <summary>
             DomainEvent class that allowes raising domain events from domain entities and allow registring
             custom callbacks to execute when a <see cref="T:NCommon.Events.IDomainEvent"/> is raised.
            </summary>
        </member>
        <member name="M:NCommon.Events.DomainEvent.RegisterCallback``1(System.Action{``0})">
            <summary>
             Registers a callback to be called when a domain event is raised.
            </summary>
            <param name="callback">An <see cref="T:System.Action`1"/> to be invoked.</param>
            <typeparam name="T">The domain event that the callback is registered to handle.</typeparam>
        </member>
        <member name="M:NCommon.Events.DomainEvent.ClearCallbacks">
            <summary>
             Clears all callbacks registered on the current thread.
            </summary>
        </member>
        <member name="M:NCommon.Events.DomainEvent.Raise``1(``0)">
            <summary>
             Raises a <see cref="T:NCommon.Events.IDomainEvent"/>.
            </summary>
            <param name="event">A instance <see cref="T:NCommon.Events.IDomainEvent"/> to raise.</param>
            <typeparam name="T">A type implementing <see cref="T:NCommon.Events.IDomainEvent"/></typeparam>
        </member>
        <member name="T:NCommon.Data.Impl.UnitOfWorkSettings">
            <summary>
             Contains settings for NCommon unit of work.
            </summary>
        </member>
        <member name="P:NCommon.Data.Impl.UnitOfWorkSettings.DefaultIsolation">
            <summary>
            Gets the default <see cref="T:System.Transactions.IsolationLevel"/>.
            </summary>
        </member>
        <member name="P:NCommon.Data.Impl.UnitOfWorkSettings.AutoCompleteScope">
            <summary>
            Gets a boolean value indicating weather to auto complete
            <see cref="T:NCommon.Data.UnitOfWorkScope"/> instances.
            </summary>
        </member>
        <member name="T:NCommon.State.Impl.ThreadLocalState">
            <summary>
            Implementation of <see cref="T:NCommon.State.Impl.ThreadLocalState"/> that stores local state data for the current thread.
            </summary>
        </member>
        <member name="M:NCommon.State.Impl.ThreadLocalState.#ctor">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:NCommon.State.Impl.ThreadLocalState"/> class.
            </summary>
        </member>
        <member name="M:NCommon.State.Impl.ThreadLocalState.Get``1(System.Object)">
            <summary>
            Gets state data stored with the specified key.
            </summary>
            <typeparam name="T">The type of data to retrieve.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
            <returns>An instance of <typeparamref name="T"/> or null if not found.</returns>
        </member>
        <member name="M:NCommon.State.Impl.ThreadLocalState.Put``1(System.Object,``0)">
            <summary>
            Puts state data into the local state with the specified key.
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
        </member>
        <member name="M:NCommon.State.Impl.ThreadLocalState.Remove``1(System.Object)">
            <summary>
            Removes state data stored in the local state with the specified key.
            </summary>
            <typeparam name="T">The type of data to remove.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
        </member>
        <member name="T:NCommon.Rules.BusinessRulesEvaluatorBase`1">
            <summary>
             A base class that implementors of <see cref="T:NCommon.Rules.IBusinessRulesEvaluator`1"/> can use to provide
             business rule evaulation logic for their entites.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:NCommon.Rules.BusinessRulesEvaluatorBase`1.AddRule(System.String,NCommon.Rules.IBusinessRule{`0})">
            <summary>
            Adds a <see cref="T:NCommon.Rules.IBusinessRule`1"/> instance to the rules evaluator.
            </summary>
            <param name="rule">The <see cref="T:NCommon.Rules.IBusinessRule`1"/> instance to add.</param>
            <param name="ruleName">string. The unique name assigned to the business rule.</param>
        </member>
        <member name="M:NCommon.Rules.BusinessRulesEvaluatorBase`1.RemoveRule(System.String)">
            <summary>
            Removes a previously added rule, specified with the <paramref name="ruleName"/>, from the evaluator.
            </summary>
            <param name="ruleName">string. The name of the rule to remove.</param>
        </member>
        <member name="M:NCommon.Rules.BusinessRulesEvaluatorBase`1.Evauluate(`0)">
            <summary>
            Evaluates all business rules registred with the evaluator against a entity instance.
            </summary>
            <param name="entity">The <typeparamref name="TEntity"/> instance against which all 
            registered business rules are evauluated.</param>
        </member>
        <member name="M:NCommon.Rules.BusinessRulesEvaluatorBase`1.EvaluateRule(System.String,`0)">
            <summary>
            Evaluates a business rules against an entity.
            </summary>
            <param name="ruleName">string. The name of the rule to evaluate.</param>
            <param name="entity">A <typeparamref name="TEntity"/> instance against which the business rules are evaluated.</param>
        </member>
        <member name="T:NCommon.Util.Inflector">
            <summary>
             Implementation of the Infelctor in Ruby that transforms words from singular to plural, 
             class names to table names, modularized class names to ones without, and class names to foreign keys
            </summary>
        </member>
        <member name="M:NCommon.Util.Inflector.#cctor">
            <summary>
            Class Constructor.
            </summary>
        </member>
        <member name="M:NCommon.Util.Inflector.Pluralize(System.String)">
            <summary>
            Returns the plural form of the word in the string
            </summary>
            <param name="word">string. The word to pluralize.</param>
            <returns>The pluralized word.</returns>
        </member>
        <member name="M:NCommon.Util.Inflector.Singularize(System.String)">
            <summary>
            The reverse of <see cref="M:NCommon.Util.Inflector.Pluralize(System.String)"/>, returns the singular form of a word in a string.
            </summary>
            <param name="word">string. The word to singularize.</param>
            <returns>The singluralized word.</returns>
        </member>
        <member name="M:NCommon.Util.Inflector.Titleize(System.String)">
            <summary>
            Capitalizes all the words and replaces some characters in the string to create a nicer looking title.
            </summary>
            <param name="word">string. The word to titleize.</param>
            <returns>The titlized word.</returns>
        </member>
        <member name="M:NCommon.Util.Inflector.Humanize(System.String)">
            <summary>
            Capitalizes the first word and turns underscores into spaces and strips _id. Formats the word into
            human readable string.
            </summary>
            <param name="lowercaseAndUnderscoredWord">string. The word to humaize</param>
            <returns>The humanized word.</returns>
        </member>
        <member name="M:NCommon.Util.Inflector.Pascalize(System.String)">
            <summary>
            Formats the string in pascal case.
            </summary>
            <param name="lowercaseAndUnderscoredWord">string. The word to Pascal case.</param>
            <returns>The word in Pascal case.</returns>
        </member>
        <member name="M:NCommon.Util.Inflector.Camelize(System.String)">
            <summary>
            Formats the string in Camel case.
            </summary>
            <param name="lowercaseAndUnderscoredWord">string. The word to format in Camel case.</param>
            <returns>string. The word in Camel case.</returns>
        </member>
        <member name="M:NCommon.Util.Inflector.Underscore(System.String)">
            <summary>
            Makes an underscored form from the expression in the string. 
            </summary>
            <param name="pascalCasedWord">string. The word to underscore.</param>
            <returns>string. The word with underscore seperators.</returns>
        </member>
        <member name="M:NCommon.Util.Inflector.Capitalize(System.String)">
            <summary>
            Capitalizes the word.
            </summary>
            <param name="word">string. The word to capitalize.</param>
            <returns>The Capitalized word.</returns>
        </member>
        <member name="M:NCommon.Util.Inflector.Uncapitalize(System.String)">
            <summary>
            Revers of <see cref="M:NCommon.Util.Inflector.Capitalize(System.String)"/>
            </summary>
            <param name="word">string. The word to un-capitalize.</param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Util.Inflector.Ordinalize(System.String)">
            <summary>
            Ordinalize turns a number into an ordinal string used to denote the position in an ordered 
            sequence such as 1st, 2nd, 3rd, 4th
            </summary>
            <param name="number">string. The number to ordinalize.</param>
            <returns>string. The ordinalized number.</returns>
        </member>
        <member name="M:NCommon.Util.Inflector.Dasherize(System.String)">
            <summary>
            Replaces underscores with dashes in the string.
            </summary>
            <param name="underscoredWord">string. The word to dasherize.</param>
            <returns>The word with dashes instead of underscores.</returns>
        </member>
        <member name="T:NCommon.State.Impl.HttpLocalState">
            <summary>
            Implementation of <see cref="T:NCommon.State.ILocalState"/> that stores and retrieves data from
            the current HttpContext.
            </summary>
        </member>
        <member name="M:NCommon.State.Impl.HttpLocalState.#ctor(NCommon.Context.IContext)">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:NCommon.State.Impl.HttpLocalState"/> class.
            </summary>
            <param name="context">An instance of <see cref="T:NCommon.Context.IContext"/>.</param>
        </member>
        <member name="M:NCommon.State.Impl.HttpLocalState.Get``1(System.Object)">
            <summary>
            Gets state data stored with the specified key.
            </summary>
            <typeparam name="T">The type of data to retrieve.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
            <returns>An instance of <typeparamref name="T"/> or null if not found.</returns>
        </member>
        <member name="M:NCommon.State.Impl.HttpLocalState.Put``1(System.Object,``0)">
            <summary>
            Puts state data into the local state with the specified key.
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
        </member>
        <member name="M:NCommon.State.Impl.HttpLocalState.Remove``1(System.Object)">
            <summary>
            Removes state data stored in the local state with the specified key.
            </summary>
            <typeparam name="T">The type of data to remove.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
        </member>
        <member name="T:NCommon.Guard">
            <summary>
            Provides utility methods to guard parameter and local variables.
            </summary>
        </member>
        <member name="M:NCommon.Guard.Against``1(System.Boolean,System.String)">
            <summary>
            Throws an exception of type <typeparamref name="TException"/> with the specified message
            when the assertion statement is true.
            </summary>
            <typeparam name="TException">The type of exception to throw.</typeparam>
            <param name="assertion">The assertion to evaluate. If true then the <typeparamref name="TException"/> exception is thrown.</param>
            <param name="message">string. The exception message to throw.</param>
        </member>
        <member name="M:NCommon.Guard.Against``1(System.Func{System.Boolean},System.String)">
            <summary>
            Throws an exception of type <typeparamref name="TException"/> with the specified message
            when the assertion
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="assertion"></param>
            <param name="message"></param>
        </member>
        <member name="M:NCommon.Guard.InheritsFrom``1(System.Object,System.String)">
            <summary>
            Throws a <see cref="T:System.InvalidOperationException"/> when the specified object
            instance does not inherit from <typeparamref name="TBase"/> type.
            </summary>
            <typeparam name="TBase">The base type to check for.</typeparam>
            <param name="instance">The object to check if it inherits from <typeparamref name="TBase"/> type.</param>
            <param name="message">string. The exception message to throw.</param>
        </member>
        <member name="M:NCommon.Guard.InheritsFrom``1(System.Type,System.String)">
            <summary>
            Throws a <see cref="T:System.InvalidOperationException"/> when the specified type does not
            inherit from the <typeparamref name="TBase"/> type.
            </summary>
            <typeparam name="TBase">The base type to check for.</typeparam>
            <param name="type">The <see cref="T:System.Type"/> to check if it inherits from <typeparamref name="TBase"/> type.</param>
            <param name="message">string. The exception message to throw.</param>
        </member>
        <member name="M:NCommon.Guard.Implements``1(System.Object,System.String)">
            <summary>
            Throws a <see cref="T:System.InvalidOperationException"/> when the specified object
            instance does not implement the <typeparamref name="TInterface"/> interface.
            </summary>
            <typeparam name="TInterface">The interface type the object instance should implement.</typeparam>
            <param name="instance">The object insance to check if it implements the <typeparamref name="TInterface"/> interface</param>
            <param name="message">string. The exception message to throw.</param>
        </member>
        <member name="M:NCommon.Guard.Implements``1(System.Type,System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> when the specified type does not
            implement the <typeparamref name="TInterface"/> interface.
            </summary>
            <typeparam name="TInterface">The interface type that the <paramref name="type"/> should implement.</typeparam>
            <param name="type">The <see cref="T:System.Type"/> to check if it implements from <typeparamref name="TInterface"/> interface.</param>
            <param name="message">string. The exception message to throw.</param>
        </member>
        <member name="M:NCommon.Guard.TypeOf``1(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> when the specified object instance is
            not of the specified type.
            </summary>
            <typeparam name="TType">The Type that the <paramref name="instance"/> is expected to be.</typeparam>
            <param name="instance">The object instance whose type is checked.</param>
            <param name="message">The message of the <see cref="T:System.InvalidOperationException"/> exception.</param>
        </member>
        <member name="M:NCommon.Guard.IsEqual``1(System.Object,System.Object,System.String)">
            <summary>
            Throws an exception if an instance of an object is not equal to another object instance.
            </summary>
            <typeparam name="TException">The type of exception to throw when the guard check evaluates false.</typeparam>
            <param name="compare">The comparison object.</param>
            <param name="instance">The object instance to compare with.</param>
            <param name="message">string. The message of the exception.</param>
        </member>
        <member name="T:NCommon.Rules.ValidationError">
            <summary>
            Represents a validation error from a <see cref="M:NCommon.Rules.IEntityValidator`1.Validate(`0)"/> method
            call.
            </summary>
        </member>
        <member name="M:NCommon.Rules.ValidationError.#ctor(System.String,System.String)">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:NCommon.Rules.ValidationError"/> data structure.
            </summary>
            <param name="message">string. The validation error message.</param>
            <param name="property">string. The property that was validated.</param>
        </member>
        <member name="M:NCommon.Rules.ValidationError.ToString">
            <summary>
            Overriden. Gets a string that represents the validation error.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCommon.Rules.ValidationError.Equals(System.Object)">
            <summary>
            Overridden. Compares if an object is equal to the <see cref="T:NCommon.Rules.ValidationError"/> instance.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Rules.ValidationError.Equals(NCommon.Rules.ValidationError)">
            <summary>
            Overriden. Compares if a <see cref="T:NCommon.Rules.ValidationError"/> instance is equal to this
            <see cref="T:NCommon.Rules.ValidationError"/> instance.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Rules.ValidationError.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NCommon.Rules.ValidationError.op_Equality(NCommon.Rules.ValidationError,NCommon.Rules.ValidationError)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:NCommon.Rules.ValidationError.op_Inequality(NCommon.Rules.ValidationError,NCommon.Rules.ValidationError)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:NCommon.Rules.ValidationError.Message">
            <summary>
             The message that describes this validation error.
            </summary>
        </member>
        <member name="P:NCommon.Rules.ValidationError.Property">
            <summary>
             The property that this validation error is associated with.
            </summary>
        </member>
        <member name="T:NCommon.Data.Language.RepositoryEagerFetchingStrategy`1">
            <summary>
            Defines the root interface to specify eager fetching strategy for a <see cref="T:NCommon.Data.IRepository`1"/>
            </summary>
            <typeparam name="T">The entity for eager fetching strategy.</typeparam>
        </member>
        <member name="M:NCommon.Data.Language.RepositoryEagerFetchingStrategy`1.Fetch``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
             Specify the path to eagerly fetch.
            </summary>
            <param name="path"></param>
            <typeparam name="TChild"></typeparam>
            <returns></returns>
        </member>
        <member name="P:NCommon.Data.Language.RepositoryEagerFetchingStrategy`1.Paths">
            <summary>
             An array of <see cref="T:System.Linq.Expressions.Expression"/> containing the eager fetching paths.
            </summary>
        </member>
        <member name="T:NCommon.Data.IFetchingStrategy`2">
            <summary>
             Specifies a fetching strategy for a <see cref="T:NCommon.Data.IRepository`1"/> instance.
            </summary>
        </member>
        <member name="M:NCommon.Data.IFetchingStrategy`2.Define(NCommon.Data.IRepository{`0})">
            <summary>
             Instructs the instance to define the fetching strategy on the repository instance.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:NCommon.State.Impl.WcfLocalState">
            <summary>
            Implementation of <see cref="T:NCommon.State.ILocalState"/> that stores local state data for a Wcf operation.
            </summary>
        </member>
        <member name="M:NCommon.State.Impl.WcfLocalState.#ctor(NCommon.Context.IContext)">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:NCommon.State.Impl.WcfLocalState"/> class.
            </summary>
            <param name="context">An instance of <see cref="T:NCommon.Context.IContext"/></param>
        </member>
        <member name="M:NCommon.State.Impl.WcfLocalState.Get``1(System.Object)">
            <summary>
            Gets state data stored with the specified key.
            </summary>
            <typeparam name="T">The type of data to retrieve.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
            <returns>An instance of <typeparamref name="T"/> or null if not found.</returns>
        </member>
        <member name="M:NCommon.State.Impl.WcfLocalState.Put``1(System.Object,``0)">
            <summary>
            Puts state data into the local state with the specified key.
            </summary>
            <typeparam name="T">The type of data to put.</typeparam>
            <param name="key">An object representing the unique key with which the data is stored.</param>
            <param name="instance">An instance of <typeparamref name="T"/> to store.</param>
        </member>
        <member name="M:NCommon.State.Impl.WcfLocalState.Remove``1(System.Object)">
            <summary>
            Removes state data stored in the local state with the specified key.
            </summary>
            <typeparam name="T">The type of data to remove.</typeparam>
            <param name="key">An object representing the unique key with which the data was stored.</param>
        </member>
        <member name="T:NCommon.State.Impl.WcfLocalState.WcfLocalStateExtension">
            <summary>
            A custom <see cref="T:System.ServiceModel.IExtension`1"/> of type <see cref="T:System.ServiceModel.OperationContext"/> that is used
            to stored local state for the current <see cref="T:System.ServiceModel.OperationContext"/>.
            </summary>
        </member>
        <member name="M:NCommon.State.Impl.WcfLocalState.WcfLocalStateExtension.Add(System.String,System.Object)">
            <summary>
            Adds state data with the given key.
            </summary>
            <param name="key">string. The unique key.</param>
            <param name="instance">object. The state data to store.</param>
        </member>
        <member name="M:NCommon.State.Impl.WcfLocalState.WcfLocalStateExtension.Get(System.String)">
            <summary>
            Gets state data stored with the specified unique key.
            </summary>
            <param name="key">string. The unique key.</param>
            <returns>object. A non-null reference if the data is found, else null.</returns>
        </member>
        <member name="M:NCommon.State.Impl.WcfLocalState.WcfLocalStateExtension.Remove(System.String)">
            <summary>
            Removes state data stored with the specified unique key.
            </summary>
            <param name="key">string. The unique key.</param>
        </member>
        <member name="M:NCommon.State.Impl.WcfLocalState.WcfLocalStateExtension.Attach(System.ServiceModel.OperationContext)">
            <summary>
            Enables an extension object to find out when it has been aggregated. Called when the extension is added to the <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions"/> property.
            </summary>
            <param name="owner">The extensible object that aggregates this extension.</param>
        </member>
        <member name="M:NCommon.State.Impl.WcfLocalState.WcfLocalStateExtension.Detach(System.ServiceModel.OperationContext)">
            <summary>
            Enables an object to find out when it is no longer aggregated. Called when an extension is removed from the <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions"/> property.
            </summary>
            <param name="owner">The extensible object that aggregates this extension.</param>
        </member>
        <member name="T:NCommon.Rules.ValidationRule`1">
            <summary>
            Implements the <see cref="T:NCommon.Rules.IValidationRule`1"/> interface and inherits from the
            <see cref="T:NCommon.Rules.SpecificationRuleBase`1"/> to provide a very basic implementation of an
            entity validation rule that uses specifications as underlying rule logic.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:NCommon.Rules.ValidationRule`1.#ctor(NCommon.Specifications.ISpecification{`0},System.String,System.String)">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:NCommon.Rules.ValidationRule`1"/> class.
            </summary>
            <param name="message">string. The validation message associated with the rule.</param>
            <param name="property">string. The generic or specific name of the property that was validated.</param>
            <param name="rule"></param>
        </member>
        <member name="M:NCommon.Rules.ValidationRule`1.Validate(`0)">
            <summary>
            Validates whether the entity violates the validation rule or not.
            </summary>
            <param name="entity">The <typeparamref name="TEntity"/> entity instance to validate.</param>
            <returns>Should return true if the entity instance is valid, else false.</returns>
        </member>
        <member name="P:NCommon.Rules.ValidationRule`1.ValidationMessage">
            <summary>
            Gets the message of the validation rule.
            </summary>
        </member>
        <member name="P:NCommon.Rules.ValidationRule`1.ValidationProperty">
            <summary>
            Gets a generic or specific name of a property that was validated.
            </summary>
        </member>
        <member name="T:NCommon.Rules.IBusinessRule`1">
            <summary>
            An interface that defines business rule for an entity instance.
            </summary>
            <typeparam name="TEntity">The type of entity that this business rule evaluates.</typeparam>
        </member>
        <member name="M:NCommon.Rules.IBusinessRule`1.Evaluate(`0)">
            <summary>
            Evaluates the business rule against an entity instance.
            </summary>
            <param name="entity"><typeparamref name="TEntity"/>. The entity instance against which
            the business rule is evaluated.</param>
        </member>
        <member name="T:NCommon.Rules.BusinessRule`1">
            <summary>
            Implements the <see cref="T:NCommon.Rules.IBusinessRule`1"/> interface and inherits from the
            <see cref="T:NCommon.Rules.SpecificationRuleBase`1"/> to provide a implementation of a business rule that
            uses specifications as rule logic.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:NCommon.Rules.BusinessRule`1.#ctor(NCommon.Specifications.ISpecification{`0},System.Action{`0})">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:NCommon.Rules.BusinessRule`1"/> instance.
            </summary>
            <param name="rule">A <see cref="T:NCommon.Specifications.ISpecification`1"/> instance that acts as the underlying
            specification that this business rule is evaluated against.</param>
            <param name="action">A <see cref="T:System.Action`1"/> instance that is invoked when the business rule
            is satisfied.</param>
        </member>
        <member name="M:NCommon.Rules.BusinessRule`1.Evaluate(`0)">
            <summary>
            Evaluates the business rule against an entity instance.
            </summary>
            <param name="entity"><typeparamref name="TEntity"/>. The entity instance against which
            the business rule is evaluated.</param>
        </member>
    </members>
</doc>
